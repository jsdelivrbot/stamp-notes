<style>

.country {
  fill: #b8b8b8;
  stroke: #fff;
  stroke-width: .5px;
  stroke-linejoin: round;
}

.graticule {
  fill: none;
  stroke: #000;
  stroke-opacity: .3;
  stroke-width: .5px;
}

.graticule-outline {
  fill: none;
  stroke: #333;
  stroke-width: 1.5px;
}

text {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 18px;
  font-weight: bold;
  text-anchor: middle;
}

</style>



<div class="gist-readme"></div>

<div class="gist-sources"></div>

<footer>
  <aside class="gist-date"></aside>
  <a class="user-login user-href">anonymous</a> block <a class="gist-href">#<span class="gist-id"></span></a>
</footer>

<script src="http://d3js.org/d3.v2.min.js?2.9.6"></script>
<script src="/highlight.min.js?20120730"></script>
<script>

var gist = location.pathname.substring(1);

d3.selectAll(".gist-id").text(gist);
d3.selectAll(".gist-src").attr("src", "/d/" + gist);
d3.selectAll(".gist-src-href").attr("href", "/d/" + gist);
d3.selectAll(".gist-href").attr("href", "https://gist.github.com/" + gist);

d3.json("https://api.github.com/gists/" + gist, function(info) {
  var formatDate = d3.time.format("%B %d, %Y"),
      parseDate = d3.time.format.iso.parse;

  document.title = info.description || gist;

  d3.selectAll(".user-login").text(info.user.login);
  d3.selectAll(".user-href").attr("href", "/" + info.user.login);
  d3.selectAll(".gist-title").text(info.description);
  d3.selectAll(".gist-date").text(formatDate(parseDate(info.updated_at)));

  var files = d3.values(info.files)
      .sort(function(a, b) { return (b.filename === "index.html") - (a.filename === "index.html") || a.filename.localeCompare(b.filename); });

  var readme = d3.selectAll(".gist-readme")
      .data(files.filter(function(d) { return /^readme\b/i.test(d.filename) && d.language === "Markdown"; }))
      .html(function(d) { return new Showdown.converter().makeHtml(d.content); });

  var source = d3.select(".gist-sources").selectAll(".gist-source")
      .data(files.filter(function(d) { return !/^readme\b/i.test(d.filename) && text(d.type); }))
    .enter().append("div")
      .attr("class", "gist-source");

  source.append("h2")
      .text(function(d) { return d.filename; })
    .append("a")
      .attr("name", function(d) { return d.filename; })
      .attr("href", function(d) { return "#" + d.filename; })
      .text("#");

  source.append("pre").append("code")
      .attr("class", function(d) { return d.language && (d.language === "JSON" ? "javascript" : d.language.toLowerCase()); })
      .text(function(d) { return d.content; });

  d3.selectAll("code")
      .each(function() { hljs.highlightBlock(this); });
});

function text(type) {
  return /^(text\/)|(application\/(javascript|json)|image\/svg$)/.test(type);
}

</script>
          