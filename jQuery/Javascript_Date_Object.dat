<style type="text/css">
button#cbutton{color:blue}
div#ex1{};

</style>

<h2>The Javascript Date Object</h2>
Creates Date instances which let you work with dates and times.

You can use various ways to specify a new instance of a Date object.

\begin{codeblock}
new Date()

new Date(milliseconds);

new Date(dateString);

new Date(year, month, date [, hour, minute, second, millisecond ]);

\end{codeblock}


If you supply no arguments, the constructor creates a __Date__ object for today's date and time according to local time. If you supply some arguments but not others, the missing arguments are set to 0. If you supply any arguments, you must supply at least the year, month, and day. You can omit the hours, minutes, seconds, and milliseconds.

One routine found in many libraries is __now__, that grubs the current date from the user's system

<div class="code-block code">
<code>
/**
 * A simple wrapper for new Date().getTime().
 *
 * @return {number} An integer value representing the number of milliseconds
 *     between midnight, January 1, 1970 and the current time.
 */
goog.now = Date.now || (function() &#123;
  return new Date().getTime();
&#125);
</code>
</div>

The date is measured in milliseconds since midnight 01 January, 1970 UTC. A day holds 86,400,000 milliseconds. The Date object range is -100,000,000 days to 100,000,000 days relative to 01 January, 1970 UTC.

The Date object provides uniform behavior across platforms.

The Date object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed.








<div class="curvy" style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex1" style="margin-left:8px">
//Invoking Date in a non-constructor context (i.e., without the new operator) 
//will return a string representing the current time.
  var theTime=Date.now();
  alert(theTime);
</div>
<button>Run</button>
</div>

<h2>Human Readable Dates</h2>

 If you ran the above code, you will notice that the numbers are really meaningless. To change it to a human readable form  you can use <dfn>date.toDateString()</dfn>, <dfn>date.toString()</dfn> or 
<dfn>toLocaleDateString()</dfn>. You should be careful when using the last one as  depends on the user's Operating System and settings. It maybe useful though if you just want to show to the user the current date and time in a format that she is familiar with.

<pre style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex1" style="margin-left:8px">
  var aDate= new Date(2009, 6, 28, 14, 39, 7);
  var humanDate=aDate.toDateString()
  alert(humanDate+'    '+aDate.toString()+'     '
               +aDate.toLocaleDateString()+'   '+aDate.toLocaleTimeString());
  
  var biggestNum = Number.MAX_VALUE;
  var smallestNum = Number.MIN_VALUE;
  var infiniteNum = Number.POSITIVE_INFINITY;
  var negInfiniteNum = Number.NEGATIVE_INFINITY;
  var notANum = Number.NaN;

  alert(biggestNum.toFixed());
  alert(smallestNum);
  alert(infiniteNum)
</div>
<button>Run</button>
</pre>


<hr />



<script type="text/javascript">

$(document).ready(function(){
 

 $('button').click(function(){
     var aText=$(this).parent().text();
       eval(aText);
     });
});

</script>





##Further Reading

[Good discussion at Yahoo Developer](http://developer.yahoo.com/ypatterns/parent.php?pattern=transition)





