 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}
{{feature-image:http://localhost/egypt/CMS/accordion.jpg}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<style>
.code-sample:hover {
	overflow-y:auto;
	width:980px;
	position:relative;
	z-index:100;
       background:#000;
       color:#f60;
     
}
</style>

##Storing Data

jQuery provides a mechanism to store data by using the
[data method](http://docs.jquery.com/Internals/jQuery.data)


<pre class="code-sample">
$('selector').data('meaningfullname', 'this is the data I am storing');
// then later getting the data with
$('selector').data('meaningfullname');
</pre>

There are many other ways of storing data, one of them is to store a flag as class.



##Animation Patterns

<div class="clearfix" style="float:left;width:38%;margin-right:10px">
<div style="width:98%;border:1px dotted #ececec;float:left;padding:0" class="clearfix" >
<a id="action" href="#">Toggle me</a>.
</div>

<div id="img_cont" style="width:98%;border:1px dotted #ececec;float:left;padding:0" class="clearfix" >
<img id="image_1" src="http://localhost/CodeIgniter/images/boxer.jpg" style="width:90%;margin:0 auto;display:block" />
</div>
</div>

Animations can be effective to indicate to a user that some area of the screen has changed.
 We can use much more complex animations as for example when deleting
records to rather send them to a recycling bin than rather disappear them all together from
the interface.

The fadeIn and fadeOut transitions are one of the most usable of all jQuery transitions.

We can also use custom animations to manage more complex behaviour.

<hr />

<script type="text/javascript">
 $('a#action').click(function() {
    $('#img_cont').fadeTo('slow','0.33').toggle().fadeTo('slow','1');
    return false;
  });
</script>

The script to run this animation is fairly simple, we use __fadeTo()__ and __toggle()__.

{{plain:

$('a#action').click(function() &#123;
    $('#img_cont').fadeTo('slow','0.33').toggle().fadeTo('slow','1');
    return false;
  &#125;);

}}

</hr>
##Using animate()

<div class="clearfix" style="float:left;width:38%;margin-right:10px">
<div style="width:98%;border:1px dotted #ececec;float:left;padding:0" class="clearfix" >
<a id="action2" href="#">Animate Me</a>.
</div>

<div id="img_cont2" style="width:98%;border:1px dotted #ececec;float:left;padding:0" class="clearfix" >
<img id="image_1" src="http://localhost/CodeIgniter/images/boxer.jpg" style="width:90%;margin:0 auto;display:block" />
</div>
</div>


<script type="text/javascript">
 $('a#action2').click(function() {
    var $small=$('#img_cont2').animate({width:"25%"},"slow").fadeTo('slow','0.33').fadeTo('slow','1');
    var $large=$('#img_cont2').animate({width:"98%"},"toggle").fadeTo('slow','0.33').fadeTo('slow','1');
    return false;
  });
</script>

The key aspect of this function is the object of style properties that will be animated, and to what end. Each key within the object represents a style property that will also be animated (for example: "height", "top", or "opacity").


The value associated with the key represents to what end the property will be animated. If a number is provided as the value, then the style property will be transitioned from its current state to that new number. Otherwise if the string "hide", "show", or "toggle" is provided, a default animation will be constructed for that property. Only properties that take numeric values are supported (e.g. backgroundColor is not supported).

The changes that we normally achieve with animate(), can be achieved with css(). The only difference
being that the latter method cannot provide the transition (i.e, properties such as slow, fast or toggle or show).

There many paths to achieving DOM element manipulation and that is where the main strength of jQuery lies.





<hr />
Using __animate()__, we can essentially animate any of an elements CSS properties.

{{plain:animate(&#123;width:"25%"&#125;,"slow")}}


{{bulb:Remember that the CSS property (since it is a variable) is not encloded in inverted commas. Note also that properties should be specified using camel case, e.g. "marginLeft" instead of "margin-left."}}


