 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}
{{feature-image: http://localhost/codeigniter/images/china/beauty_17.jpg}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->


<h2>The modulus operator (%)</h2>

The modulo (% ) operator in JavaScript has some peculiarities compared to other common programming languages. The operator yields the remainder of its operands from an implied division; the left operand is the
dividend and the right operand is the divisor.

In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts
floating-point operands.
The result of a floating-point remainder operation as computed by the % operator is not the same as the
<strong>remainder</strong> operation defined by IEEE 754. 

The IEEE 754 <strong>remainder</strong> operation computes the
remainder from a rounding division, not a truncating division, and so its behaviour is not analogous to
that of the usual integer remainder operator. Instead the ECMAScript language defines % on floating point
operations to behave in a manner analogous to that of the Java integer remainder operator; this may
be compared with the C library function fmod.
The result of a ECMAScript floating-point remainder operation is determined by the rules of IEEE
arithmetic:

-  If either operand is NaN, the result is NaN.
-  The sign of the result equals the sign of the dividend.
-  If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.
-  If the dividend is finite and the divisor is an infinity, the result equals the dividend.
-  If the dividend is a zero and the divisor is finite, the result is the same as the dividend.
-  In the remaining cases, where neither an infinity, nor a zero, nor NaN is involved, the floating-point
remainder r from a dividend n and a divisor d is defined by the mathematical relation r = n &#8722; (d * q)
where q is an integer that is negative only if n/d is negative and positive only if n/d is positive, and
whose magnitude is as large as possible without exceeding the magnitude of the true mathematical
quotient of n and d.


<div  class="code-block console-wrap"><div class="code code-block">
<code>
 var a,b,c;
 b=101;
 c=5;
 a = b % c;
log('modulus 101/5 = ', a);
a = 101 % 5.1;
log ('modulus 101/5.2', a);
a = 101 % 0;
log('modulus 101/0', a);
a = 0 % 101;
log('modulus 0/101', a);
</code>

</div>

<div  class="msg" class="msg" style="white-space:pre;font-family:monospace;line-height:1.3">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 

</div>
<h3>Some other Peculiarities</h3>
One other peculiarity of the <strong>%</strong> operator is that the result will have the same sign as divident. I came across this peculiarity while studying google's just released library closure.  The google routine is shown below.
(I  removed the class _goog_  for the demo).

<div  class="code-block console-wrap"><div class="code code-block">
<code>
/**
 * The % operator in JavaScript returns the remainder of a / b, but differs from
 * some other languages in that the result will have the same sign as the
 * dividend. For example, -1 % 8 == -1, whereas in some other languages
 * (such as Python) the result would be 7. This function emulates the more
 * correct modulo behavior, which is useful for certain applications such as
 * calculating an offset index in a circular list.
 *
 * @param {number} a The dividend.
 * @param {number} b The divisor.
 * @return {number} a % b where the result is between 0 and b (either 0 <= x < b
 *     or b < x <= 0, depending on the sign of b).
 */
math = {};
math.modulo = function (a, b) {
  var r = a % b;
  // If r and b differ in sign, add b to wrap the result to the correct sign.
  return (r * b < 0) ? r + b : r;
};

var a = -1;
var b = 8;

var m = math.modulo(a, b);
var m1 = a % b;

log(m, m1);
</code>

</div>

<div  class="msg" class="msg" style="white-space:pre;font-family:monospace;line-height:1.3">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
<img src="http://localhost/codeigniter/images/jquery.png" style="float:right; width:85px"/>
</div>

I am not sure that either google or python are correct rather than the ECMA spec, as 

{{plain: 27 % 10 = 7    is the same like -1 % 8 }}

So certainly if you are looking at a circular list it will throw you where?



<h3>Extending the Math Object</h3>
We can introduce a modulo() method that would return the remainder, based on first rounding the two numbers as shown below:

The Math object does not have a [[Construct]] property; it is not possible to use the Math object as a
constructor with the new operator. Also it inherits its prototype from the Object.

<div  class="code-block console-wrap"><div class="code code-block">
<code>
// extend Math object
Math.modulo=function(a,b){
  a=Math.round(a);
  b=Math.round(b);
  var z = (a-0) % (b-0);
  return z;
}
  
log ('modulo 101/5.2 = ', Math.modulo(101,5.2));

</code>

</div>


<div  class="msg" class="msg" style="white-space:pre;font-family:monospace;line-height:1.3">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 

</div>


##Further Reading



 



  
  







    