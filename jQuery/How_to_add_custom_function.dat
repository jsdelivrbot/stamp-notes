<style>
 .col1{width:22.3%;height:350px;float:left;
border-right:1px solid #bebebe}
.table1{width:60%;border:1px solid #bebebe;float:left}
.c1{}
.c2{}
.c3{}
.c4{}
.table1 tr td{border:1px solid #bebebe;margin:1px} 
.table1 td{padding:1px;margin-bottom:3px}
</style>


<h3>How to add custom functions to jQuery </h3>

Custom functions enable you to add your own functions to, in other words how to create plugins for jQuery. Consider the following function:

\begin{codeblock}
$.fn.welcome = function(msg) { 
        alert(msg) ;
}

$('.msg').click(function() {
   $(this).welcome('My first Plugin');
});
\end{codeblock}


This is great and easy, however, this will pollute the jQuery name space, how about if another plugin has the same name for this function?



<script type="text/javascript">
$.fn.welcome = function(message){ 
        alert(message);
       return this;
} 
</script>

<p><a class="c2">This is a Plugin</a></p>

<script>
$('a.c2').click(function(){
   $(this).welcome('My first Plugin');
});
</script>



##Extending our Plugin with some Functions
<a class="c4">Click to See the helloColor Plugin!</a>

<hr/>

Here is our snippet

<code class="snippet">
(function($){ 
    $.fn.extend({ 
        myColorAlert: function(msg) { 
            return this.addClass('punked') 
                      .bind('click', function(){ 
                alert(msg); 
            }); 
        }, 
        myPunk: function() { 
            return this.addClass('punked') 
                      .bind('click', function(){ 
                alert('You were punked!'); 
            }); 
        } 
    }); 
})(jQuery);
</code>



<script type="text/javascript">

(function($){ 
    $.fn.extend({ 
        myColorAlert: function(msg) { 
            return this.addClass('punked') 
                      .bind('click', function(){ 
                alert(msg); 
            }); 

        }, 
        myPunk: function() { 
            return this.addClass('punked') 
                      .bind('click', function(){ 
                alert('You were punked!'); 
            }); 
        } 
    }); 
})(jQuery);

$('a.c4').myPunk('test').myColorAlert();
</script>


We can wrap the whole plugin into another function 
{{plain:

(function ($) &#123; 
    // Javascript code 
   $.fn.helloWorld = function(message)&#123; 
        alert(message);
       return this;

&#125;)(jQuery)

<p><a class="c3">Click to See the helloWorld Plugin!</a></p>
}}


<script type="text/javascript">
(function ($) { 
    // Javascript code 
    jQuery.fn.helloWorld = function(message){
        alert(message);
       return this;

})(jQuery)
</script>

<script>
 
$('a.c3').click(function(){
   $(this).helloWorld('My first Plugin');
});


</script>

  
