
<h2>Function (Built-in Object)</h2>

_Function_ is the object from which JavaScript functions are derived.  Functions are first-class data types in JavaScript, so that they may be assigned to variables and passed to functions as you would any other piece of data. Functions are, of course, reference types.


The `Function` constructor creates a new `Function object`. In JavaScript every function is actually a `Function object`.

\subsection{Constructor}

`new Function ([arg1[, arg2[, ...argN]],] functionBody);`


\subsection{Parameters}

`arg1, arg2, ... argN`

Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example "x", "theValue", or "a,b".

\subsubsection{functionBody}

A string containing the JavaScript statements comprising the function definition.

\section{Description}

Function objects created with the Function constructor are parsed when the function is created. This is less efficient than declaring a function and calling it within your code, because functions declared with the function statement are parsed with the rest of the code.

All arguments passed to the function are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed.

{{bulb: Functions created with the Function constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the Function constructor was called. This is different from using eval with code for a function expression.

Invoking the Function constructor as a function (without using the new operator) has the same effect as invoking it as a constructor. }}

\begin{codeblock}
// Example can be run directly in your JavaScript console

// Create a function that takes two arguments and returns the sum of those arguments
var adder = new Function("a", "b", "return a + b");

// Call the function
log(adder(2, 6));
// > 8
\end{codeblock}



One of the main advantages of using  such an approach is that the script will create the function after it loads. It can also be used in certain instances in place of `eval()`.


\begin{codeblock}
(function foo(flag) {
  if (flag) {
    return (log (flag, 'flag'));
      }
  foo(true);
  return(log("flag is false", flag));
})(false);
\end{codeblock}


\begin{codeblock}
var s1='var a=function(){return 1;}';
var s2='var b=function(){return 2;}';
var s3='var c=function(){return  3;}';

var s4 = s1+s2+s3+s4;

var f=new Function('s4', 'return s5(12)');

log(f);
\end{codeblock}



##Further Reading




  