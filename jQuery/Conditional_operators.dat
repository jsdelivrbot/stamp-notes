 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->


<h2>Conditional Statements and Operator</h2>
This is the only JavaScript operator that takes three arguments and is used as a shorter form of the if statement.

The first argument takes an expression that evaluates to true or false. If the condition is true, the operator returns the value of expr1; otherwise, it returns the value of expr2.

The shorthand form is also popular with most developers
{{snippet:
condition ? expr1 : expr2
}}

Some examples:

<div  class="code-block console-wrap"><div class="code code-block"><code>
 var z = 23;

log(z<20? 'less than 20' : 'greater or equal to twenty');
var val =8;
(val in ([1,2,3,4,5,6,7,8,'9']))?log(true): log(false); 
 Javascript provides a shorthand statement for the "if...else" sequence. This
coding standard allows the following formats:

#
# // On one line, if it doesn't exceed the limit of 80 characters in length
# var a = b ? b + 10 : 200;
#
# // On multiple lines, to improve readability:
# var a = (value > 20 && otherValue < 10 && boolFoo === false)
#           ? this.foo();
#         : this.bar();
</code>
</div>
<p id="msg1" class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

For readability

<div  class="code-block console-wrap"><div class="code code-block"><code>
/*
  On one line, if it doesn't exceed the limit of 80 characters in length
  var a = b ? b + 10 : 200;

  On multiple lines, to improve readability:
  var a = (value > 20 && otherValue < 10 && boolFoo === false)
          ? this.foo();
          : this.bar();
 */
var a = (value > 20 && otherValue < 10 && boolFoo === false)
        ? this.foo();
        : this.bar();
</code>
</div>
<p id="msg1" class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>



<hr/>

<h3>An if else library function</h3>
 
Developers are always trying to abstract programming concepts, in many libraries, you can find short-cut functions that can return consitionals as above. Here is one inspired from cakePHP, a function If() ;

<div  class="code-block console-wrap"><div class="code code-block"><code>
var z = 23;

function iF(cond, expr1, expr2) {
     return (cond ? expr1 : expr2);
}

function logIf(cond, expr1, expr2) {
     log(cond ? expr1 : expr2);
}

logIf(z < 20, ' < 20', ' >20');


</code>
</div>
<p id="msg1" class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>


<div  class="code-block console-wrap"><div class="code code-block"><code>
var d = new Date();
var time = d.getHours();

if (time < 10) {
    log(time, 'Good morning!');
} else {
    log(time, 'Good day!');
}
</code>
</div>
<p id="msg1" class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>


<h3>Exercises</h3>

- Write a short program to test if a number has digits after the decimal point.

- Write a short function to compare two letters the way a human, would compare them i.e, a & lt; B.


  
  







          