 <!--
{{feature-image: /codeigniter/images/china/beauty_04.jpg}}
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->

<SCRIPT>
goog.require('goog.i18n.DateTimeFormat');
goog.require('goog.i18n.TimeZone');
goog.require('goog.i18n.DateTimeSymbols');
goog.require('goog.i18n.DateTimeSymbols_de');
  </SCRIPT>

<h2>How to Internationalize Date and Time Formatting</h2>
Closure's date time formatting classes deal with Date formatting in a standard way. First we will explore some of the properties and I will show you how to Inernationalize a date below the first notes.

<div  class="code-block console-wrap">
<div class="code-block code">
<code>
var date;
goog.i18n.DateTimeSymbols = goog.i18n.DateTimeSymbols_de;

(function testHHmmss() {
  date = new Date(2009, 6, 27, 13, 10, 10, 250);
  var fmt = new goog.i18n.DateTimeFormat('HH:mm:ss');
  log('13:10:10', fmt.format(date));
})();

(function testhhmmssa() {
  date = new Date(2009, 6, 27, 13, 10, 10, 250);
  var fmt = new goog.i18n.DateTimeFormat('h:mm:ss a');
  log('1:10:10 nachm.', fmt.format(date));
})();

(function testEEEMMMddyy() {
  date = new Date(2009, 6, 27, 13, 10, 10, 250);
  var fmt = new goog.i18n.DateTimeFormat('EEE, MMM d, yy');
  log('Do., Jul 27, 06', fmt.format(date));
})();

(function testFractionalSeconds() {
  date = new Date(2006, 6, 27, 13, 10, 10, 213);
  var fmt = new goog.i18n.DateTimeFormat('s:S');
  log('10:3', fmt.format(date));
  var fmt = new goog.i18n.DateTimeFormat('s:SS');
  log('10:26', fmt.format(date));
  var fmt = new goog.i18n.DateTimeFormat('s:SSS');
  log('10:256', fmt.format(date));
  var fmt = new goog.i18n.DateTimeFormat('s:SSSS');
  log('10:2560', fmt.format(date));
  var fmt = new goog.i18n.DateTimeFormat('s:SSSSS');
  log('10:25600', fmt.format(date));
})();

(function test_timeDisplayOnDaylighTimeTransition() {
  // US PST transition to PDT on 2006/4/2/ 2:00am, jump to 2006/4/2 3:00am,
  var date = new Date(Date.UTC(2006, 4 - 1, 2, 2, 30, 0));
  var timeZone = goog.i18n.TimeZone.createTimeZone(0);
  var fmt = new goog.i18n.DateTimeFormat('MM/dd/yyyy HH:mm:ss Z');
  log('04/02/2006 02:30:00 +0000', fmt.format(date, timeZone));

  // US PDT transition to PST on 2006/10/29/ 2:00am, jump back to PDT
  // 2006/4/2 1:00am,
  date = new Date(Date.UTC(2006, 10 - 1, 29, 1, 30, 0));
  fmt = new goog.i18n.DateTimeFormat('MM/dd/yyyy HH:mm:ss Z');
  log('10/29/2006 01:30:00 +0000', fmt.format(date, timeZone));
})();
 

</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>date Time Formatting Standards</h3>
DateTime formatting functions following the pattern specification as defined
in JDK, ICU and CLDR, with minor modification for typical usage in JS.
Pattern specification: (Refer to JDK/ICU/CLDR)

 


  |Symbol| Meaning| Presentation |       Example|
|  ------|   -------|       ------------   |     -------|
|  G|    era designator|       (Text)|              AD|
 | y#  |     year |                   (Number) |           1996|
 | Y*|       year (week of year)|     (Number)|            1997|
|  u* |      extended year|           (Number) |           4601|
|  M|        month in year |          (Text & Number)|     July & 07|
|  d|        day in month|            (Number) |           10|
|  h|        hour in am/pm (1~12)|    (Number) |           12|
|  H|        hour in day (0~23) |     (Number)            0|
|  m |       minute in hour|          (Number) |           30|
  |s |       second in minute |       (Number)|            55|
 | S |       fractional second|       (Number)  |          978|
 | E |       day of week |            (Text) |             Tuesday|
  |e* |      day of week (local 1~7)| (Number)|            2|
  |D*  |     day in year |            (Number) |           189|
  |F*  |     day of week in month|    (Number)|            2 (2nd Wed in July)|
  |w*  |     week in year |           (Number)  |          27|
 | W*  |     week in month |          (Number)|            2|
  |a  |      am/pm marker      |      (Text)|              PM|
  |k  |      hour in day (1~24)|      (Number)|            24|
  |K  |      hour in am/pm (0~11)|    (Number)|            0|
  |z    |    time zone               |(Text) |             Pacific Standard Time|
  |Z    |    time zone (RFC 822) |    (Number)|            -0800|
  |v     |   time zone (generic) |    (Text) |             Pacific Time|
  |g*   |    Julian day            |  (Number) |           2451334|
  |A*   |    milliseconds in day|     (Number)|            69540000|
  |'       | escape for text        | (Delimiter)|         'Date='|
  |''      | single quote           | (Literal)|           'o''clock'|
 
 -  Item marked with '*' are not supported yet.
  Item marked with '#' works different than java
 
 -  The count of pattern letters determine the format.
  (Text): 4 or more, use full form, <4, use short or abbreviated form if it
  exists. (e.g., "EEEE" produces "Monday", "EEE" produces "Mon")
 
 -  (Number): the minimum number of digits. Shorter numbers are zero-padded to
  this amount (e.g. if "m" produces "6", "mm" produces "06"). Year is handled
  specially; that is, if the count of 'y' is 2, the Year will be truncated to
  2 digits. (e.g., if "yyyy" produces "1997", "yy" produces "97".) Unlike other
  fields, fractional seconds are padded on the right with zero.
 
 - (Text & Number): 3 or over, use text, otherwise use number. (e.g., "M"
  produces "1", "MM" produces "01", "MMM" produces "Jan", and "MMMM" produces
  "January".)
 
 -  Any characters in the pattern that are not in the ranges of ['a'..'z'] and
  ['A'..'Z'] will be treated as quoted text. For instance, characters like ':',
  '.', ' ', '#' and '@' will appear in the resulting time text even they are
  not embraced within single quotes.


<h3>Discussions</h3>
 
CLDR the Unicode Common Locale Data Repository  is the best place to get information on Internalionalization of your code.




<span id="chapter" class="hidden">11</span>
##Further Reading





  
  







