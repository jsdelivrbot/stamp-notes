 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<style type="text/javascript">
.exercise{padding:10px;
                  white-space:pre;}
</style>

<h2>String Substitutions </h2>
String substitutions, i.e, replacements are common in many cases, starting from building a simple __sprintf__ function to a full templating system. The normal pattern, normally denoted by '%s' as is common in many computer languages.

{{plain:
   subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog"
}}

The example below shows a single data-output function (i.e we only use %s), as opposed to a demuxer that can branch to several different data-output-lines. (See the example below this for a demuxer).

<div  class="code-block console-wrap">
<div class="code-block code">
<code>
/**
 * Does simple python-style string substitution.
 * subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog".
 * @param {string} str The string containing the pattern.
 * @param {*} var_args The items to substitute into the pattern.
 * @return {string} A copy of {@code str} in which each occurrence of
 *     {@code %s} has been replaced an argument from {@code var_args}.
 */

subs = function (str, var_args) {
  // This appears to be slow, but testing shows it compares more or less
  // equivalent to the regex.exec method.
  for (var i = 1; i < arguments.length; i++) {
    // We cast to String in case an argument is a Function.  Replacing $&, for
    // example, with $$$& stops the replace from subsituting the whole match
    // into the resultant string.  $$$& in the first replace becomes $$& in the
    //  second, which leaves $& in the resultant string.  Also:
    // $$, $`, $', $n $nn
   
 var replacement = String(arguments[i]).replace(/\$/g, '$$$$');
       str = str.replace(/\%s/, replacement);
  }
  return str;
};

var s = 'User name is:  %s %s';

s = subs(s, 'Yiannis', 'Lazarides');

log(s);

</code>
</div>

<div   class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>A demuxer printf</h3>


<div  class="code-block console-wrap">
<div class="code-block code">
<code>


/**
 * Performs sprintf-like conversion, ie. puts the values in a template.
 * DO NOT use it instead of built-in conversions in simple cases such as
 * 'Cost: %.2f' as it would introduce unneccessary latency oposed to
 * 'Cost: ' + cost.toFixed(2).
 * @param {string} formatString Template string containing % specifiers.
 * @param {string|number} var_args Values formatString is to be filled with.
 * @return {string} Formatted string.
 */

var string={};

string.format = function(formatString, var_args) {

  // Convert the arguments to an array (MDC recommended way).
  var args = Array.prototype.slice.call(arguments);

  // Try to get the template.
  var template = args.shift();
  if (typeof template == 'undefined') {
    throw Error('[string.format] Template required');
  }

  // This re is used for matching, it also defines what is supported.
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;

  /**
   * Chooses which conversion function to call based on type conversion
   * specifier.
   * @param {string} match Contains the re matched string.
   * @param {string} flags Formatting flags.
   * @param {string} width Replacement string minimum width.
   * @param {string} dotp Matched precision including a dot.
   * @param {string} precision Specifies floating point precision.
   * @param {string} type Type conversion specifier.
   * @param {string} offset Matching location in the original string.
   * @param {string} wholeString Has the actualString being searched.
   * @return {string} Formatted parameter.
   */
  function replacerDemuxer(match,
                           flags,
                           width,
                           dotp,
                           precision,
                           type,
                           offset,
                           wholeString) {

    // The % is too simple and doesn't take an argument.
    if (type == '%') {
      return '%';
    }

    // Try to get the actual value from parent function.
    var value = args.shift();

    // If we didn't get any arguments, fail.
    if (typeof value == 'undefined') {
      throw Error('[string.format] Not enough arguments');
    }

    // Patch the value argument to the beginning of our type specific call.
    arguments[0] = value;

    return string.format.demuxes_[type].apply(null, arguments);

  }

  return template.replace(formatRe, replacerDemuxer);
};


/**
 * Contains various conversion functions (to be filled in later on).
 * @type {Object}
 * @private
 */
string.format.demuxes_ = {};


/**
 * Processes %s conversion specifier.
 * @param {string} value Contains the formatRe matched string.
 * @param {string} flags Formatting flags.
 * @param {string} width Replacement string minimum width.
 * @param {string} dotp Matched precision including a dot.
 * @param {string} precision Specifies floating point precision.
 * @param {string} type Type conversion specifier.
 * @param {string} offset Matching location in the original string.
 * @param {string} wholeString Has the actualString being searched.
 * @return {string} Replacement string.
 */
string.format.demuxes_['s'] = function(value,
                                            flags,
                                            width,
                                            dotp,
                                            precision,
                                            type,
                                            offset,
                                            wholeString) {
  var replacement = value;
  // If no padding is necessary we're done.
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }

  // Otherwise we should find out where to put spaces.
  if (flags.indexOf('-', 0) > -1) {
    replacement =
        replacement + string.repeat(' ', width - replacement.length);
  } else {
    replacement =
        string.repeat(' ', width - replacement.length) + replacement;
  }
  return replacement;
};


/**
 * Processes %f conversion specifier.
 * @param {number} value Contains the formatRe matched string.
 * @param {string} flags Formatting flags.
 * @param {string} width Replacement string minimum width.
 * @param {string} dotp Matched precision including a dot.
 * @param {string} precision Specifies floating point precision.
 * @param {string} type Type conversion specifier.
 * @param {string} offset Matching location in the original string.
 * @param {string} wholeString Has the actualString being searched.
 * @return {string} Replacement string.
 */
string.format.demuxes_['f'] = function(value,
                                            flags,
                                            width,
                                            dotp,
                                            precision,
                                            type,
                                            offset,
                                            wholeString) {

  var replacement = value.toString();

  if (!(isNaN(precision) || precision == '')) {
    replacement = value.toFixed(precision);
  }

  // Generates sign string that will be attached to the replacement.
  var sign;
  if (value < 0) {
    sign = '-';
  } else if (flags.indexOf('+') >= 0) {
    sign = '+';
  } else if (flags.indexOf(' ') >= 0) {
    sign = ' ';
  } else {
    sign = '';
  }

  if (value >= 0) {
    replacement = sign + replacement;
  }

  // If no padding is neccessary we're done.
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }

  // We need a clean signless replacement to start with
  replacement = isNaN(precision) ?
      Math.abs(value).toString() :
      Math.abs(value).toFixed(precision);

  var padCount = width - replacement.length - sign.length;

  // Find out which side to pad, and if it's left side, then which character to
  // pad, and set the sign on the left and padding in the middle.
  if (flags.indexOf('-', 0) >= 0) {
    replacement = sign + replacement + string.repeat(' ', padCount);
  } else {
    // Decides which character to pad.
    var paddingChar = (flags.indexOf('0', 0) >= 0) ? '0' : ' ';
    replacement =
        sign + string.repeat(paddingChar, padCount) + replacement;
  }

  return replacement;
};


/**
 * Processes %d conversion specifier.
 * @param {string} value Contains the formatRe matched string.
 * @param {string} flags Formatting flags.
 * @param {string} width Replacement string minimum width.
 * @param {string} dotp Matched precision including a dot.
 * @param {string} precision Specifies floating point precision.
 * @param {string} type Type conversion specifier.
 * @param {string} offset Matching location in the original string.
 * @param {string} wholeString Has the actualString being searched.
 * @return {string} Replacement string.
 */
string.format.demuxes_['d'] = function(value,
                                            flags,
                                            width,
                                            dotp,
                                            precision,
                                            type,
                                            offset,
                                            wholeString) {

  value = parseInt(value, 10);
  precision = 0;

  return string.format.demuxes_['f'](value, flags, width, dotp, precision,
                                          type, offset, wholeString);
};


// These are additional aliases, for integer conversion.
string.format.demuxes_['i'] = string.format.demuxes_['d'];
string.format.demuxes_['u'] = string.format.demuxes_['d'];

var inputString = 'User name is:  %s %s %.3f';

s = string.format(inputString, 'Yiannis', 'Lazarides', 12.000456);

log(s);
</code>
</div>
<div   class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

If you are wandering what a __demuxer__  is, it is terminology borrowed from electronics. A {{dfn: demux}} is a device taking a __single__ input signal (in our case a function argument) and selecting one of many data-output-lines which is connected to the single input. In a way a __select__  switch is a demuxer.

The routine is fairly long, but self explanatory. Why go into all this trouble and for what? Suppose you are getting two inputs from a user, the name and surname and you want to output a combined string that says:

{{plain: Hello Yiannis Lazarides}}

Fairly simple to do using, traditional methods, but the catch is language, how about if your application allows for different languages. You do not want to hard code all the logic of translation in each and every routine. In this case the Hello world will be part of an internationalized dictionary and assigned to a variable.

{{plain: 
var hello= __('hello', LANG);
s = string.format(inputString, 'Yiannis', 'Lazarides', 12.000456);
}}

The function __() would search through a dictionary and replace the 'Hello' string with the right string in the user's language. If you are interested in internationalized applications - and you should - you can next read about internationalization issues.

<h3>Templating</h3>

So far we have examined, simple string substitutions. If we are only dealing with string types we can use the __sub()__ method or if we are dealing with different input types, such as numeric or string, we can use the demuxer. For more involved applications, especially those that we may have a fragment of HTML where we want to replace sections of strings, we are better off with some form of templating system.

With the exception of some case using Ajax, templating belongs to the view section on the server, however,  we will investigate templating in the next article here.





<span id="chapter" class="hidden">: Substitution </span>

##Further Reading

    