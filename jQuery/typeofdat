 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}
{{feature-image: http://localhost/codeigniter/images/beauty.jpeg}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->


<h2>typeof</h2>
JavaScript provides two methods that you can use to examine the 
[type](/CodeIgniter/Blogs/tutorials/jQuery/Javascript_Types)  of object you are using __typeof__ and __instanceof__. 


The __typeof__ operator is a unary operator (i.e., it takes only one operand). It uses the __postfix__ notation, i.e it is typed on the left of the expression it operates on.


<div  class="code-block console-wrap"><div class="code code-block">
<code>
 var z2 = null; 
 var z3 = false;
 var z4 = '';
 var z5 ={test: 12,
                        a:function(){}
                 };
 var z = 12;
 var y = [1,2,3,4]; 
log('z1 type : ', typeof z1);
log('z2 type : ', typeof z2);
log('z3 type : ', typeof z3);
log('z4 type : ', typeof z4);
log('z4 type : ', typeof z5 );
log('z4 type : ', typeof z5.test );
log('z4 type : ', typeof z5.a );
log('z  type : ',typeof z);
log('a number as string', typeof z.toString());
log('z type of', typeof window);
log('y type of', typeof y, y instanceof Array);
</code>

</div>

<div   class="msg" style="white-space:pre;font-family:monospace;line-height:1.3">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Automatic type conversion</h3>
The ECMAScript runtime system performs automatic type conversion as needed. To clarify the semantics of
certain constructs it is useful to define a set of conversion operators. These operators are not a part of the
language; they are defined here to aid the specification of the semantics of the language. The conversion
operators are polymorphic; that is, they can accept a value of any standard type, but not of type Reference,
List, or Completion (the internal types).

<div  class="code-block console-wrap"><div class="code code-block">
<code>
 
function isUndefined(obj) {
  return (typeof obj == 'undefined');
}
var a;
log(isUndefined(a));
log(isUndefined('a'));


</code>

</div>
<div   class="msg" style="white-space:pre;font-family:monospace;line-height:1.3">
</div>

<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>
<h3>An Enhanced typeof</h3>

<div  class="code-block console-wrap"><div class="code code-block">
<code>
//==============================================================================
// Language Enhancements
//==============================================================================


/**
 * This is a "fixed" version of the typeof operator.  It differs from the typeof
 * operator in such a way that null returns 'null' and arrays return 'array'.
 * @param {*} value The value to get the type of.
 * @return {string} The name of the type.
 */

typeOf = function(value) {
  var s = typeof value;
  if (s == 'object') {
    if (value) {
      // We cannot use constructor == Array or instanceof Array because
      // different frames have different Array objects. In IE6, if the iframe
      // where the array was created is destroyed, the array loses its
      // prototype. Then dereferencing val.splice here throws an exception, so
      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'
      // so that will work. In this case, this function will return false and
      // most array functions will still work because the array is still
      // array-like (supports length and []) even though it has lost its
      // prototype.
      // Mark Miller noticed that Object.prototype.toString
      // allows access to the unforgeable [[Class]] property.
      //  15.2.4.2 Object.prototype.toString ( )
      //  When the toString method is called, the following steps are taken:
      //      1. Get the [[Class]] property of this object.
      //      2. Compute a string value by concatenating the three strings
      //         "[object ", Result(1), and "]".
      //      3. Return Result(2).
      // and this behavior survives the destruction of the execution context.
      if (value instanceof Array ||  // Works quickly in same execution context.
          // If value is from a different execution context then
          // !(value instanceof Object), which lets us early out in the common
          // case when value is from the same context but not an array.
          // The {if (value)} check above means we don't have to worry about
          // undefined behavior of Object.prototype.toString on null/undefined.
          //
          // HACK: In order to use an Object prototype method on the arbitrary
          //   value, the compiler requires the value be cast to type Object,
          //   even though the ECMA spec explicitly allows it.
          (!(value instanceof Object) &&
           (Object.prototype.toString.call(
               /** @type {Object} */ (value)) == '[object Array]') ||

           // In IE all non value types are wrapped as objects across window
           // boundaries (not iframe though) so we have to do object detection
           // for this edge case
           typeof value.length == 'number' &&
           typeof value.splice != 'undefined' &&
           typeof value.propertyIsEnumerable != 'undefined' &&
           !value.propertyIsEnumerable('splice')

          )) {
        return 'array';
      }
      // HACK: There is still an array case that fails.
      //     function ArrayImpostor() {}
      //     ArrayImpostor.prototype = [];
      //     var impostor = new ArrayImpostor;
      // this can be fixed by getting rid of the fast path
      // (value instanceof Array) and solely relying on
      // (value && Object.prototype.toString.vall(value) === '[object Array]')
      // but that would require many more function calls and is not warranted
      // unless closure code is receiving objects from untrusted sources.

      // IE in cross-window calls does not correctly marshal the function type
      // (it appears just as an object) so we cannot use just typeof val ==
      // 'function'. However, if the object has a call property, it is a
      // function.
      if (!(value instanceof Object) &&
          (Object.prototype.toString.call(
              /** @type {Object} */ (value)) == '[object Function]' ||
          typeof value.call != 'undefined' &&
          typeof value.propertyIsEnumerable != 'undefined' &&
          !value.propertyIsEnumerable('call'))) {
        return 'function';
      }


    } else {
      return 'null';
    }

  // In Safari typeof nodeList returns 'function', and on Firefox
  // typeof behaves similarly for HTML{Applet,Embed,Object}Elements
  // and RegExps.  We would like to return object for those and we can
  // detect an invalid function by making sure that the function
  // object has a call method.
  } else if (s == 'function' && typeof value.call == 'undefined') {
    return 'object';
  }
  return s;
};

var y = [1, 2, 3, 4];

log(typeOf(y));
log(typeOf('test'));

</code>

</div>
<div   class="msg" style="white-space:pre;font-family:monospace;line-height:1.3">
</div>

<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>
##Further Reading



 



  
  







