 
<script type="text/javascript">
goog.require('goog.color');
goog.require('goog.color.alpha')
</script>

## Colors Part II the Alpha Channel 
 
In the first part of this article series we have examined the `rgb` color space which takes three components red, green and blue. The alpha channel adds another component that of transparency. This is a much more useful set of routines in that in modern browsers and websites you are likely to encounter colors with transparency and for which the earlier routines might stand a chance of breaking and not responding the way you want them to be.


<div  class="code-block console-wrap" title="Testing color strings containing Alpha channel values">
<div class="code-block code">
<code>
(function testIsValidRgbaColor() {
  var goodRgbaColors = ['rgba(255, 0, 0, 1)', 'rgba(255,127,0,1)', 'rgba(0,0,255,0.5)', '(255, 26, 75, 0.2)', 'RGBA(0, 55, 0, 0.6)', 'rgba(0, 200, 0, 0.123456789)'];

  var badRgbaColors = ['(255, 0, 0)', '(2555,0,0, 0)', '(1,2,3,4,5)', 'rgba(1,20,)', 'RGBA(20,20,20,)', 'RGBA', 'rgba(255, 0, 0, 1.1)'];

  for (var i = 0; i < goodRgbaColors.length; i++) {
    assertEquals(4, goog.color.alpha.isValidRgbaColor_(goodRgbaColors[i]).length, goodRgbaColors[i]);
  }

  for (var i = 0; i < badRgbaColors.length; i++) {
    assertEquals(0, goog.color.alpha.isValidRgbaColor_(badRgbaColors[i]).length, badRgbaColors[i]);
  }
})();
</code>
</div>
<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<button id="light">Lightened</button>
<button id="darken">darken</button>
<ol class="results"></ol> 
</div>

<h3>Validation</h3>

The library has a number of useful methods for validating if a string is a valid color.

<div  class="code-block console-wrap">
<div class="code-block code">
<code>
(function testIsValidRgbColor() {
  var goodRgbColors = ['(255, 26, 75)', 'RGB(2, 3, 4)', '(0,0,0)', 'rgb(255,255,255)'];
  var badRgbColors = ['(2555,0,0)', '(1,2,3,4)', 'rgb(1,20,)', 'RGB(20,20,20,)'];
  for (var i = 0; i < goodRgbColors.length; i++) {
    log(goodRgbColors[i], goog.color.isValidRgbColor_(goodRgbColors[i]).length, 3);
  }
  for (var i = 0; i < badRgbColors.length; i++) {
    log(badRgbColors[i], goog.color.isValidRgbColor_(badRgbColors[i]).length, 0);
  }
})();

</code>
</div>
<div id="color-box1" style="width:80px;height:80px;background-color:red">
</div>
<div  id ="msg" class="msg" >
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Conversion of Colors from one type to anoher</h3>

<div  class="code-block console-wrap">
<div class="code-block code">
<code>
for (var prop in goog.color){
     log(prop);
}

</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Color Manipulations</h3>
The only color manipulation methods available and of interest are __blend()__, __darken()__ and __highContrast__. The latter is interesting as it offers a way to determine if a color scheme would pass W3C guidelines for accessibility.

The routine finds the "best" (highest-contrast) of the suggested colors for the prime
 color. Uses W3C formula for judging readability and visual accessibility:
(see [color-contrast](http://www.w3.org/TR/AERT#color-contrast).

It takes a prime Color represented by a 3-element array with
red, green, and blue values respectively, in the range [0, 255], and a suggestions array
suggestions Array of colors, each a 3-element array
 with red, green, and blue values respectively, in the range [0, 255].

It returns the Highest-contrast color represented by a 3-element
 array with red, green and blue values respectively, in the range
 [0, 255].
<div  class="code-block console-wrap">
<div class="code-block code">
<code>
/**
 * This method runs unit tests against goog.color.highContrast().
 */
(function testHighContrast() {
  white = [255, 255, 255];
  black = [0, 0, 0];
  lemonchiffron = [255, 250, 205];
  sienna = [160, 82, 45];
  grey = [100, 100, 100];

  var suggestion = goog.color.highContrast(
  black, [white, black, sienna, lemonchiffron]);

  // should return an array of three numbers
  assert('Return value is an array.', typeof suggestion == 'object');
  assert('Return value is 3 long.', suggestion.length == 3);

  // known color combos should return a known (i.e. human-verified) suggestion
  assert('White is best on sienna.', goog.color.highContrast(
  sienna, [white, black, sienna, lemonchiffron]), white);

  assert('Black is best on lemonchiffron.', goog.color.highContrast(
  white, [white, black, sienna, lemonchiffron]), black);
})();

var prime = [255, 122, 55];
var suggestion = goog.color.highContrast(prime, [sienna, lemonchiffron, black, white]);
log('suggestion ', suggestion.toString());

var s = 'rgb(' + suggestion.toString() + ')';
log(s);
$('#msg6').css('color', s);

var prime = 'rgb(' + prime.toString() + ')';
$('#msg6').css('backgroundColor', prime);
</code>
</div>
<div  id ="msg6" class="msg">Test
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>


<h3>The colors unit so far</h3>

The color unit like its many other counterparts, strives to be comprehensive, however the parser needs to be strengthened. Some difficult to dvelop routines can be found in the library. At the end of this article we are going to try and devlop a colr scheme album, which you can flip and choose a color scheme for a webpage. Will see what we need by the time we get there.



<span id="chapter" class="hidden">11</span>
##Further Reading


 



  
  







                                                                                                