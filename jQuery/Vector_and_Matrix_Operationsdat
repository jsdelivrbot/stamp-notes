 <!--
{{feature: .. The take home message: seek the signal, avoid the noise, and do your own homework .. zerohedge.com}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: UI, jQuery, Visibility Filters, CSS Visibility }}
{{snippet:using CodeIgniter's file_helper class}}

-->

<style type="text/css">

.sales1{color:red}
ul.ex {font-size:13px;display:block}
ul.ex {list-type:none;list-style-type:none}
ul.ex li, ul.ex1 li{display:block;width:90%;border:1px solid #ececec;margin-bottom:1px}
ul.ex li span{cursor:pointer}
</style>



<h3>Matrix and Vector Operations</h3>

<p>
Matrices as ordered rectangular array of numbers. They can be used to represent systems of linear equations, as will be explained below. In this article I will show you how to build a UI for matrix operations to solve various problems. 

In my opinion, the best library available, if you need to do matrix or vector calculations is Sylvester. We will first load Sylvester 
using Ajax (you will need to run the console below).
</p>


<h3>Executing a script using $.getScript()</h3>


<div  class="code-block console-wrap">
<div class="code code-block">
<code>
$('#ajax-button').click(function(){
     $.<span class="highlight">getScript</span>('/CodeIgniter/js/sylvester/sylvester.js');
     return false;
});
</code>
</div>
<div  id="msg" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button">Load Data!</button>
<ol class="results"></ol> 
</div>

<hr/>

<div  class="code-block console-wrap">
<div class="code code-block">
<code>
// creating our first matrix
var m = $M([
  [1, 2, 3, 4, 5, 7, 10],
  [3, 4, 5, 6, 7, 8]]);
//find the maximum
log(m.max());
</code>
</div>
<div  id="msg" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button">Load Data!</button>
<ol class="results"></ol> 
</div>

<hr/>
<h3>Adding two matrices together</h3>
Two matrices A and B can be added or subtracted if and only if their dimensions are the same (i.e. both matrices have the same number of rows and columns. Take:



<div  class="code-block console-wrap">
<div class="code code-block">
<code>
// creating our first matrix
var A = $M([
  [1, 2],
  [1, 0]]);

var B = $M([
  [2, 1],
  [1, 0]]);

var C = A.add(B);

z = A.inspect() + '\n\n' + B.inspect() + '  + \n\n' + C.inspect();
out(z);
</code>
</div>
<div  id="msg" class="msg"style="white-space:pre">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button">Load Data!</button>
<ol class="results"></ol> 
</div>

<h3>Adding a callback function</h3>
Since the JavaScript will be loaded asynchronously we can use a callback to 
process the data once the script is loaded. In the example below, I have just used an alert.

<div  class="code-block console-wrap">
<div class="code">

<code>
$('#ajax-button-01').click(function(){
     $.getScript('/CodeIgniter/js/a.js', function(){
       alert('script loaded and executed');});
     return false;
});

</code>

</div>


<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-01">Load Data!</button>

<ol class="results"></ol> 
</div>

<hr/>


In the last listing we will add 100 to the value of var a, in order to verify that
the script has been loaded. At this stage we will not concern ourselves with any error trapping.



<div  class="code-block console-wrap">
<div class="code">
<code>
$('#ajax-button-02').click(function(){
     $.getScript('/CodeIgniter/js/a.js', function(){
       a = a +100;
      alert('script loaded and executed value of a '+a);
        });
     return false;
});
</code>
</div>
<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-02">Load Data!</button>
<ol class="results"></ol> 
</div>

<h3>Loading a Cookie plugin</h3>

<div  class="code-block console-wrap">
<div class="code">
<code>
$('#ajax-button-03').click(function(){
     $.getScript('/CodeIgniter/js/cookies.js', function(){
           $.cookie('the_cookie', 'the_value');
           var z = $.cookie('the_cookie');
            alert('script loaded and executed value of  ' + z);
        });
     return false;
});
</code>
</div>
<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-03">Load Data!</button>
<ol class="results"></ol> 
</div>










