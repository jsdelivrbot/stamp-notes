 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}
{{feature-image:http://localhost/egypt/CMS/accordion.jpg}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->

##What are Effects

Effects are changes to the CSS in such a way that it appears to the
eye that a 'transition' has taken place. Elements can be faded in or out and blocks of text
or images can be hidden or displayed.

jQuery comes almost on its own at the ease in achieving such effects and especially appeals
to Web designers. In many cases such effectcs can be achieved in two or three lines of javascript code.



##Animation Patterns

<div class="clearfix" style="float:left;width:38%;margin-right:10px">
<div style="width:98%;border:1px dotted #ececec;float:left;padding:0" class="clearfix" >
<a id="action" href="#">Toggle me</a>.
</div>

<div id="img_cont" style="width:98%;border:1px dotted #ececec;float:left;padding:0" class="clearfix" >
<img id="image_1" src="http://localhost/CodeIgniter/images/boxer.jpg" style="width:90%;margin:0 auto;display:block" />
</div>
</div>

Animations can be effective to indicate to a user that some area of the screen has changed.
 We can use much more complex animations as for example when deleting
records to rather send them to a recycling bin than rather disappear them all together from
the interface.

The fadeIn and fadeOut transitions are one of the most usable of all jQuery transitions.

We can also use custom animations to manage more complex behaviour.

<hr />

<script type="text/javascript">
 $('a#action').click(function() {
    $('#img_cont').fadeTo('slow','0.33').toggle().fadeTo('slow','1');
    return false;
  });
</script>

The script to run this animation is fairly simple, we use __fadeTo()__ and __toggle()__.

{{plain:

$('a#action').click(function() &#123;
    $('#img_cont').fadeTo('slow','0.33').toggle().fadeTo('slow','1');
    return false;
  &#125;);

}}

</hr>
##Using animate()

<div class="clearfix" style="float:left;width:38%;margin-right:10px">
<div style="width:98%;border:1px dotted #ececec;float:left;padding:0" class="clearfix" >
<a id="action2" href="#" title="Click to animate the image" >Animate Me</a>.
</div>

<div id="img_cont2" style="width:98%;border:1px dotted #ececec;float:left;padding:0" class="clearfix" >
<img id="image_1" src="http://localhost/CodeIgniter/images/boxer.jpg" style="width:90%;margin:0 auto;display:block" />
</div>
</div>


<script type="text/javascript">
 $('a#action2').click(function() {
    var $small=$('#img_cont2').animate({width:"25%"},"slow").fadeTo('slow','0.33').fadeTo('slow','1');
    var $large=$('#img_cont2').animate({width:"98%"},"toggle").fadeTo('slow','0.33').fadeTo('slow','1');
    return false;
  });
</script>

The key aspect of this function is the object of style properties that will be animated, and to what end. Each key within the object represents a style property that will also be animated (for example: "height", "top", or "opacity").


The value associated with the key represents to what end the property will be animated. If a number is provided as the value, then the style property will be transitioned from its current state to that new number. Otherwise if the string "hide", "show", or "toggle" is provided, a default animation will be constructed for that property. Only properties that take numeric values are supported (e.g. backgroundColor is not supported).

The changes that we normally achieve with animate(), can be achieved with css(). The only difference
being that the latter method cannot provide the transition (i.e, properties such as slow, fast or toggle or show).

There many paths to achieving DOM element manipulation and that is where the main strength of jQuery lies.





<hr />
Using __animate()__, we can essentially animate any of an elements CSS properties.

{{plain:animate(&#123;width:"25%"&#125;,"slow")}}


{{bulb:Remember that the CSS property (since it is a variable) is not encloded in inverted commas. Note also that properties should be specified using camel case, e.g. "marginLeft" instead of "margin-left."}}


##Turning your effect into a simple plugin

{{example:
<div style="height:170px" class="clearfix">
<div class="fade">
  <p><a href="#">fade</a></p>
</div>

<div style="width:150px;height:150px;background:purple;float:left"></div>
<div style="width:150px;height:150px;background:green;float:left"></div>
<div style="width:150px;height:150px;background:blue;float:left"></div>
</div>
}}


<script>

jQuery.fn.fadeToggle = function(speed, easing, callback) {
  return this.animate({opacity: 'toggle'}, speed, easing, callback);  
};
  $(document).ready(function() {
  $('.fade').click(function() {
 $(this).nextAll().fadeToggle('slow');
 return false;
});
});

</script>


##Accessibility

Transitions are about visual communication, as such by default they are not accessible by users with visual impairments. If what the transition communicates is important for the user not to miss then you can consider these techniques.

- Set the focus on the item that got changed. This enables assistive technologies to detect where a change happened. Of course if the user is typing or needs the focus in another area then this solution cannot be used.

- Provide ALT tags that preview what will happen when the user engages an interaction. For example, if you can close a panel and provide a way to communicate where the panel is collapsed to, you might consider putting text in the ALT for the image that tells the user what will happen when the click/activate the close icon and how they can get the panel open again.


##Further Reading

[Good discussion at Yahoo Developer](http://developer.yahoo.com/ypatterns/parent.php?pattern=transition)





