
\section{UUID}

GUIDs when repesented as as strings are at least 36 and no more than 38 characters in length and match the pattern 

<tt>^\{?[a-zA-Z0-9]{36}?\}$</tt>

 and hence are always ascii. There is a very good discussion at [stackoverflow](http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript), regarding this with a number of good answers.

\begin{codeblock}
// Adapted with minor changes from Kevin Hakanson answer at the stackoverflow 
// link quoted above
var UUID = function uid() {
  var chars = '0123456789abcdef'.split('');
  var uuid = [],
  rnd = Math.random,
  r;
  uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
  uuid[14] = '4'; // version 4
  for (var i = 0; i < 36; i++) {
    if (!uuid[i]) {
      r = 0 | rnd() * 16;

      uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r & 0xf];
    }
  }
  return uuid.join('');
};
log(UUID());

// an amazing short code by broofa
var t = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
  var r = Math.random() * 16 | 0,
  v = c == 'x' ? r : (r & 0x3 | 0x8);
  return v.toString(16);
});

log(t);

$('#UUID').text(t);
\end{codeblock}

<div id="UUID" style="font-size:small;text-align:right"></div>


The nice compact function for creating rfc4122-compliant random UUIDs shown above was posted by broofa who has more on his [blog](http://www.broofa.com/2008/09/javascript-uuid-function/).

Math.uuid.js is small (~400bytes), and has no dependencies on other libs, so can drop into just about any JS project. It can be used to produce either RFC4122-compliant v4 (random) uuids, or more compact, non-standard IDs of arbitrary length and base. 

My own interest in this stemmed from this development. Each codeblock, has a UUID generated during editing of the post. This could be saved in the data-UUID attribute. During filtering the code gets removed and stored in the database. If edited it can then be re-saved without affecting the post. This can really save a lot of typing and errors and can enable forking out! Needs more thinking.

Of course UUIDs are not a panacae and is interesting to see how Angular deals with [uids](http://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.js).

\begin{codeblock}
/**
 * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
 * characters such as '012ABC'. The reason why we are not using simply a number counter is that
 * the number string gets longer over time, and it can also overflow, where as the nextId
 * will grow much slower, it is a string, and it will never overflow.
 *
 * @returns an unique alpha-numeric string
 */
var  uid               =  ['0', '0', '0','A','B','Z','0'];
var z = function nextUid() {
  var index = uid.length;
  var digit;

  while(index) {
    index--;
    digit = uid[index].charCodeAt(0);
    if (digit == 57 /*'9'*/) {
      uid[index] = 'A';
      return uid.join('');
    }
    if (digit == 90  /*'Z'*/) {
      uid[index] = '0';
    } else {
      uid[index] = String.fromCharCode(digit + 1);
      return uid.join('');
    }
  }
  uid.unshift('0');
  return uid.join('');
}


log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());
log(z());



\end{codeblock}




















                                                                                                                                                                                                                                                                                                                                                                                                                                                  