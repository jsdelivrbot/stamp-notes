 
<style type="text/css">
p#msg6 > li { list-style-type: decimal;line-height:1.5; margin:5px }
.shade{background:#ececec}
</style>
<h2>Checking for Australia</h2>

All regex repetition operators are {{wi:greedy}}. They try to match as much as possible in a string. Unfortunately, this might not always be a desired effect. Thus, lazy operators are used to solve this problem. They only match the smallest possible pattern and are used by adding a '?' after the respective greedy operator. In some implementations such as those for PHP , the 'U' modifier may be used to make all repetiton operators lazy. 



<h3>Lazy</h3>

I we now change the above operator by adding a '?' after it. This will make it lazy:

\begin{codeblock}
var re = /<h1>This.*?<\/h1>/;
var s = '<h1>This is a heading</h1><h1>This is another one.</h1>';
           s =s.match(re); 
log(s.toString().entityify());
\end{codeblock}


<h3>Matching with the `g` flag</h3>

Another confusing aspect of regular expressions is the flag `g`. If used with the above code, it will return an array of \textbf{all matches}.

\begin{codeblock}
var re = /<h1>This.*?<\/h1>/g;
var s = '<h1>This is a heading</h1><h1>This is another one.</h1>';
           s =s.match(re); 
log(s.toString().entityify());
\end{codeblock}

<h3>A more practical example</h3>
We will now develop a short program to capture code from a page, add line numbers and re-format it. Pretty much what you get if you use some of the common highlighting libraries.

First we will check that capturing works properly.


\begin{codeblock}
 var re = /.*?\n/g; // match all lines of code
 var   s = $that.siblings('.code').text();
           s =s.match(re); 
 log(s.toString());
\end{codeblock}

Once we are sure that our regex is working, we will then add the numbers at the beginning of each line.

\begin{codeblock}
var re = /.*?\n/g; // match all lines of code
 var   s = $that.siblings('.code').text();
           s =s.match(re); 
var temp = '';
 for (var i = 0;i<s.length; i++){
          s[i]=(i+1)+'   '+s[i];
          temp = temp + s[i] ; 
} 

logPRE(temp);
\end{codeblock}

If we want to get a bit more fancy, we could represent the code as an HTML list. This way we could also add some color on odd and even numbers.

\begin{codeblock}
 var re = /.*?\n/g; // match all lines of code
 var   s = $that.siblings('.code').text();
           s =s.match(re); 
var temp = '<ol>';
 for (var i = 0;i< s.length; i++){
          s[i]=  '<li>' +s[i]  + '</li>' ;
          temp = temp + s[i] ; 
} 

temp = temp + '</ol>';
$('#msg5').html(temp);
\end{codeblock}
<p class= "msg" id="msg5" ></p>
  

This actually, does not look very nice. Jquery interpreted the html in the code and returned it as another list. We would have been better off using jQuery to wrap the lines.

Here is the final version.

\begin{codeblock}
 var re = /.*?\n/g; // match all lines of code
 var   s = $that.siblings('.code').text();
           s =s.match(re); 
var temp = '&lt;' + 'ol id="code"  '+'&gt;';
$('#msg6').append(temp);
 for (var i = 0;i&lt; s.length; i++){
          s[i]=  s[i] ;
             if (i  % 2 == 0) {
                      class=' class="shade" ' ;}
                             else{class='';};
             $('#msg6').append('&lt;li' + class +'&gt;'+ s[i] + '&lt;' + '/li&gt;');
       
          temp = temp + s[i] ; 
} 


$('#msg6').append('&lt;'+'/ ol&gt;');
$('#msg6').append('test');
\end{codeblock}
<p class= "msg" id="msg6" >


Personally, I don't find the 'zebra' style very readable - unlike a lot of other people - and I am not using it. Also sometimes color-coding is confusing. I would rather stick to a simpler layout like I am using here.

We can use similar methods to number lines in a textarea or re-format text. 
Life is not easy for programmers, but is getting easier with good libraries.

<h3>Summary</h3>

We have reviewed, lazy and greedy expressions. A lazy expression uses *?. we then used the flag 'g' to match a number of lines globally and build a small example to number lines of code. Not bad for a few minutes of your time. Try it on your own, without copying the code from here. These are __important__ concepts and fundamental. Memorize them and let them become second nature to you.

##Further Reading

<ol>
<li>Regular Expression  Blog of [Steven Levithan](http://blog.stevenlevithan.com/)</li>

<li>[Mozilla's reference for match()](https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:String:match)</li>
  
  
<li>A good article at [Smashing Magazine](http://www.smashingmagazine.com/2009/05/06/introduction-to-advanced-regular-expressions/), but based on PHP.</li>

</ol>

<span class="chapter">13</span>


    