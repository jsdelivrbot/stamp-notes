 <!--

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->

\section{The new Operator}

The \textsc{new} operator is used to create an _instance_ of an object. What happens if we forget to use it and simply call the constructor?

<div  class="code-block console-wrap"><div class="code code-block">
<code>
function Person(){ 
  this.name = "Yannis"; 
} 
<span class="green">// undefined </span>
var personA = Person(); 
assert( !personA, "Is undefined, not an instance of Person." ); 
<span class="green">// with new creates instance </span>
var personB = new Person(); 
assert( personB.name == "Yannis", "Property exists on the personB instance." );
</code>
</div>
<p  class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results">
</ol> 
</div>

<hr/>
A good pattern to use in order to avoid the possibility of such error is to use 
<em>arguments.callee</em>. The function will first check if there is an instance of the object and if not then create one. 

<div  class="code-block console-wrap">
<div class="code code-block">
<code>
// A solution using arguments.callee.
function Person(first, last){ 
<span class="highlight">if ( !(this instanceof arguments.callee) ) </span>
    return new Person(first, last); 
   
  this.name = first + " " + last; 
} 

// note there is no new operator used!
// we create a new user object
var user = Person("John", "Lazarides");
      
log('typeof  user', typeof  user ); 
log( user.name, "Returns the right name." );
</code>
</div>
<p class="msg"  style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results" style="margin-top:8px"></ol> 
</div>

<strong>callee</strong> is a property of the arguments local variable available within all function objects; callee as a property of Function.arguments is no longer used. (Function.arguments itself is also deprecated.)

arguments.callee allows anonymous functions to refer to themselves, which is necessary for recursive anonymous functions.

The this keyword does not refer to the currently executing function. Use the callee property to refer to a function within the function body.

<h3>Class?</h3>
<div  class="code-block console-wrap">
<div class="code code-block">
<code>
// A solution using arguments.callee.
function Class(first, last){ 
if ( !(this instanceof arguments.callee) ) 
    return new Class(first, last); 
   
   // this is private function
   this.test ='test';

  return {
     name :  first + " " + last ,
        age  :  52,
        test : 'test'
  } 
} 

// note there is no new operator used!
// we create a new user object
var user = Class("John", "Lazarides"); 
       
       
       
log('typeof  user', typeof  user ); 
log( user.name, "Returns the right name." );
log(user.age, "returns age");

for (var prop in user){
   log('property: ',prop, user[prop]);
}
</code>
</div>
<p class="msg"  style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results" style="margin-top:8px"></ol> 
</div>


##Further Reading





  
  







                      