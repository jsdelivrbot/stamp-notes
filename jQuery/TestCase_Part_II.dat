

<h2>TestCase Part II</h2>

In the first part of this article we have examined, how we can look for a function into the window global object. We will now see how we can look for functions starting with __test__.

Since we can iterate though the global object and find what functions have been defined in the
global context, we can use regular expressions and look for anything starting from __test__ or any of the other prefixes we want to reserve for automated tests. We simply define it as:

{{plain:
if ((new RegExp('^' + prefix)).test(name) && goog.isFunction(ref)) &#123;
      foundTests.push(ref);
    &#125;
}}




\begin{codeblock}
function testSomething(a) {
   return a+4;};
function testSomethingElse() {};
function test_Other() {};

var prefix = 'test';

autoDiscoverTests = function () {

  var testSource = typeof goog.global['RuntimeObject'] != 'undefined' ? goog.global['RuntimeObject'](prefix + '*') : goog.global;

  var foundTests = [];

  for (var name in testSource) {

    try {
      var ref = testSource[name];
    } catch(ex) {
      // NOTE: When running tests from a file:// URL on Firefox 3.5
      // for Windows, any reference to window.sessionStorage raises
      // an "Operation is not supported" exception. Ignore any exceptions raised
      // by simply accessing global properties.
    }

    if ((new RegExp('^' + prefix)).test(name) && goog.isFunction(ref)) {
      foundTests.push(ref);
    }
  }
  log(foundTests);
}

autoDiscoverTests();
\end{codeblock}



<h3>Running the Tests </h3>
Once we have captured all the functions in an array we can now proceed to execute them. while doing so we will take a couple of precautions, one is to ensure that we provide some form of a timeout, in case there is a problem with one of the tests.

\begin{codeblock}
var p = [];

var testSource = window;
window.$AAA = function () {
   
};

for (var prop in testSource) {
  p.push(prop);

}

p = p.sort();
p = p.join(', ');
log(p);

/*goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};*/
\end{codeblock}
<div id="closureTestRunnerLog"></div>


<h3>Cycling through the Tests</h3>
As you can see we have now managed to capture all the test names into an array. What remains now is a way to execute them. Simply eval(function), will not work, you will need to actually call the function as name.call(this). This is the context of the function in our case it will be the global space and we can let it be null. We simply at this stage just iterate all the properties of our __foundTests()__ array and call each function.

If the notion of storing functions in an array is alien to you, remember that functions are just objects.



\begin{codeblock}
function testSomethingElse() {
  log('testSomethingElse executed');
  assertEquals('a test', 12, 12);
};
function testOther() {
  log('testOther executed');
};

var prefix = 'test';

autoDiscoverTests = function () {

  var testSource = typeof goog.global['RuntimeObject'] != 'undefined' ? goog.global['RuntimeObject'](prefix + '*') : goog.global;

  var foundTests = [];

  for (var name in testSource) {

    try {
      var ref = testSource[name];
    } catch(ex) {
      // NOTE: When running tests from a file:// URL on Firefox 3.5
      // for Windows, any reference to window.sessionStorage raises
      // an "Operation is not supported" exception. Ignore any exceptions raised
      // by simply accessing global properties.
    }

    if ((new RegExp('^' + prefix)).test(name) && goog.isFunction(ref)) {
      foundTests.push(ref);
    }
  }
  return foundTests;
}

function autoTest() {
  test = autoDiscoverTests();
  for (var i = 0; i < test.length; i++) {
    test[i].call();
  }
};

autoTest();
\end{codeblock}

I have kept the above code to a minimum. To write a full functional TestCase class, we need to watch-out both for some minor Browser differences as well as to build-in both a bit more functionality, such as error trapping and the possibility of a function taking too long to execute in which case we need to have some form of a time-out. We can accomplish the latter using Timers.

You can examine Closure's TestCase (under the testing directory and see how much more involved it is). 



<span id="chapter" class="hidden">11</span>
##Further Reading





  
  







                                            