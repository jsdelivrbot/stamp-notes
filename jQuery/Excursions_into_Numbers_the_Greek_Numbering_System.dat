 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<style type="text/css">
.code{margin:0;padding-top:0}
.code-block{                        background:url(http://localhost/codeigniter/images/code-bg.gif);
margin:0;padding:0}
.code-block .code{white-space:pre;font-family:inherit;padding:0;margin:0}
.highlight{background:yellow}
.green{color:green}
 .greek  { font-family: Aristarcoj, Cardo, "ALPHABETUM Unicode", "Arev Sans", AttikaU, BosporosU, "CMU Serif",
	 CODE2000, "DejaVu Serif", Dioxipe, "Galilee Unicode Gk", "Gandhari Unicode",
	"Hindsight Unicode", KadmosU, "New Athena Unicode"; font-size: 100% }

</style>



<h3>Excursions into Numbers, the Greek Numbering System</h3>
This exercise will give us some additional boost into using Unicode, characters with Javascript as well as using jQuery and algorithmic design.

Some additional information can be found at http://www.russellcottrell.com/greek/utilities/GreekNumberConverter.htm, where there is also a javascript converter.

<div  class="code-block"><div class="code code-block"><code>
<span class="green">//Change the Base of a Number! </span>
        digitsArray = new Array(
	new Array( 945, 946, 947, 948, 949, 987, 950, 951, 952),
	new Array( 953, 954, 955, 956, 957, 958, 959, 960, 985),
	new Array( 961, 963, 964, 965, 966, 967, 968, 969, 993)
);

  log( "Click #", 'button' ); 
</code>
</div>
<p class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>

<form id="calc" name="calc"> 
<table border=1 cellspacing=0 bordercolor=darkblue frame=border rules=rows> 
<tr><td>number
    <td><input size=24 maxLength=24 name="" class="input" /> 
    <td>enter a number
<tr><td>N = 
   
</table> 
</form> 
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>


<hr/>

<h4>Displaying Unicode Characters Correctly</h4> 

If you cannot see the Unicode Numbers correctly, it is quite possible that your system has not got the correct font installed. Firstly we set the font information correctly as follows:

{{plain:
.greek  &#123; font-family: Aristarcoj, Cardo, "ALPHABETUM Unicode", "Arev Sans", AttikaU, BosporosU, "CMU Serif",
	 CODE2000, "DejaVu Serif", Dioxipe, "Galilee Unicode Gk", "Gandhari Unicode",
	"Hindsight Unicode", KadmosU, "New Athena Unicode"; font-size: 125% &#125;
}}

<h3>Number System</h3>
<p class="greek">
Like the Roman Numerals, which were derived from the Greek Numeral System, each unit (1, 2, …, 9) was assigned a separate letter, each tens (10, 20, ..., 90) a separate letter, and each hundreds (100, 200, ..., 900) a separate letter. 
</p>

<p class="greek">
This requires 27 letters, so the 24-letter Greek alphabet was extended by using three obsolete letters: <a href="/wiki/Digamma" title="Digamma">digamma</a> &#989;,(also used are <a href="/wiki/Stigma_%28letter%29" title="Stigma (letter)">stigma</a> &#987; or, in modern Greek, &#963;&#964;) for 6, <a href="/wiki/Qoppa" title="Qoppa">qoppa</a> &#991; for 90, and <a href="/wiki/Sampi" title="Sampi">sampi</a> &#993; for 900.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>2<span>]</span></a></sup>. </p>

<p class="greek">
To distinguish numerals from letters they are followed by the <i>keraia</i> (Greek <span xml:lang="grc" lang="grc">&#954;&#949;&#961;&#945;&#943;&#945;</span>, "hornlike projection"), a symbol ( &#697; ) similar to an <a href="/wiki/Acute_accent" title="Acute accent">acute</a> sign ( &#180; ) but with its own <a href="/wiki/Unicode" title="Unicode">Unicode</a> character (U+0374).
</p>

<p>This alphabetic system operates on the additive principle in which the numeric values of the letters are added together to form the total. For example:
</p>

{{plain:
 241 is represented as &#963;&#956;&#945;&#697; (200 + 40 + 1).
}}

<p class="greek">To represent numbers from 1,000 to 999,999 the same letters are reused to serve as thousands, tens of thousands, and hundreds of thousands. A "left keraia" (Unicode U+0375, ‘Greek Lower Numeral Sign’) is put in front of thousands to distinguish them from the standard use. For example, 2008 is represented as &#885;&#946;&#951;&#697; (2000 + 8).
</p>



<table class="wikitable greek" >
<tbody><tr>
<th align="left">Letter</th>
<th>Value</th>
<th></th>
<th>Letter</th>
<th>Value</th>
<th></th>
<th>Letter</th>

<th>Value</th>
</tr>
<tr>
<td>&#945;&#697;</td>
<td><a href="/wiki/1_%28number%29" title="1 (number)">1</a></td>
<td></td>
<td>&#953;&#697;</td>
<td><a href="/wiki/10_%28number%29" title="10 (number)">10</a></td>
<td></td>
<td>&#961;&#697;</td>
<td><a href="/wiki/100_%28number%29" title="100 (number)">100</a></td>

</tr>
<tr>
<td>&#946;&#697;</td>
<td><a href="/wiki/2_%28number%29" title="2 (number)">2</a></td>
<td></td>
<td>&#954;&#697;</td>
<td><a href="/wiki/20_%28number%29" title="20 (number)">20</a></td>
<td></td>
<td>&#963;&#697;</td>
<td><a href="/wiki/200_%28number%29" title="200 (number)">200</a></td>
</tr>

<tr>
<td>&#947;&#697;</td>
<td><a href="/wiki/3_%28number%29" title="3 (number)">3</a></td>
<td></td>
<td>&#955;&#697;</td>
<td><a href="/wiki/30_%28number%29" title="30 (number)">30</a></td>
<td></td>
<td>&#964;&#697;</td>
<td><a href="/wiki/300_%28number%29" title="300 (number)">300</a></td>
</tr>
<tr>

<td>&#948;&#697;</td>
<td><a href="/wiki/4_%28number%29" title="4 (number)">4</a></td>
<td></td>
<td>&#956;&#697;</td>
<td><a href="/wiki/40_%28number%29" title="40 (number)">40</a></td>
<td></td>
<td>&#965;&#697;</td>
<td><a href="/wiki/400_%28number%29" title="400 (number)">400</a></td>
</tr>
<tr>
<td>&#949;&#697;</td>

<td><a href="/wiki/5_%28number%29" title="5 (number)">5</a></td>
<td></td>
<td>&#957;&#697;</td>
<td><a href="/wiki/50_%28number%29" title="50 (number)">50</a></td>
<td></td>
<td>&#966;&#697;</td>
<td><a href="/wiki/500_%28number%29" title="500 (number)">500</a></td>
</tr>
<tr>
<td><span class="Unicode">&#989;</span>&#697; or <span class="Unicode">&#987;</span>&#697; or &#963;&#964;&#697;</td>

<td><a href="/wiki/6_%28number%29" title="6 (number)">6</a></td>
<td></td>
<td>&#958;&#697;</td>
<td><a href="/wiki/60_%28number%29" title="60 (number)">60</a></td>
<td></td>
<td>&#967;&#697;</td>
<td><a href="/wiki/600_%28number%29" title="600 (number)">600</a></td>
</tr>
<tr>
<td>&#950;&#697;</td>
<td><a href="/wiki/7_%28number%29" title="7 (number)">7</a></td>

<td></td>
<td>&#959;&#697;</td>
<td><a href="/wiki/70_%28number%29" title="70 (number)">70</a></td>
<td></td>
<td>&#968;&#697;</td>
<td><a href="/wiki/700_%28number%29" title="700 (number)">700</a></td>
</tr>
<tr>
<td>&#951;&#697;</td>
<td><a href="/wiki/8_%28number%29" title="8 (number)">8</a></td>
<td></td>

<td>&#960;&#697;</td>
<td><a href="/wiki/80_%28number%29" title="80 (number)">80</a></td>
<td></td>
<td>&#969;&#697;</td>
<td><a href="/wiki/800_%28number%29" title="800 (number)">800</a></td>
</tr>
<tr>
<td>&#952;&#697;</td>
<td><a href="/wiki/9_%28number%29" title="9 (number)">9</a></td>
<td></td>
<td>&#991;&#697;</td>

<td><a href="/wiki/90_%28number%29" title="90 (number)">90</a></td>
<td></td>
<td>&#993;&#697;</td>
<td><a href="/wiki/900_%28number%29" title="900 (number)">900</a></td>
</tr>
</tbody></table>

<p>
So in plain computer language to display the HTML, we need to specify the Unicode numbers

{{plain:
                  &amp;#945;&amp;#697; = &#945;&#697;
}}

</p>

The earliest use of the alphabetic numerals seems to be in a Halicarnasus inscription of date not much later than 450 BC. 
Two caskets from the famous mausoleum at Halicarnassus which are attributed to the time of Mausolus, about 350 B.C., are inscribed with the letters = 754 and 293. Another stone inscription found at Athens and perhaps belonging to the middle of the fourth century B.C. has, in five fragments of columns, numbers in tens and units expressed on the same system, the tens on the right and the units on the left.



##Further Reading

http://home.att.net/~srschmitt/script_number_bases.html


<script type="text/javascript">
$(document).ready(function(){

  $('button.eval').click(function(){
   var code=$(this).siblings('.code').text();
    
   $that=$(this);
    //clear logger before output
   $that.siblings(".results").text('');
   eval(code);
 
  function assert(pass, msg){
     var type = pass ? "PASS" : "FAIL";
     var result='<li class=" ' + type + ' "><b>' + type + "</b> " 
         + msg + "</li>";
     $that.siblings(".results").append(result).fadeTo('fast','0.35').fadeTo('fast','1.0');
     return result;
   }
 function log(){
  var msg = "";
  for ( var i = 0; i < arguments.length; i++ ) {
    msg += " " + arguments[i];
  }
  $that.siblings(".results").append("<li class='LOG'><b>LOG</b> " + msg + "</li>");
}

var digitsArray = new Array(
    new Array( 945, 946, 947, 948, 949, 987, 950, 951, 952),
    new Array( 953, 954, 955, 956, 957, 958, 959, 960, 985),
    new Array( 961, 963, 964, 965, 966, 967, 968, 969, 993)
);

function htmlString(unicodeDigit, diagritic){
  var s='';
   if (diagritic==0) s='&#697;';
    return    '&#' + unicodeDigit + ';' + s ;
}

function digit( x )
{
     var s="ERROR"; var  xString=x+'';
     var digits=xString.length; 
     log('LOG : Number of Digits ', digits);
     if (digits == 1) {               
          s = htmlString(digitsArray[0][x-1],0);
      }
   if (x==10){s=htmlString(digitsArray[1][0],0)}
   if ( (x>10) && (x < 100) ) {
       //get index for tens
        var tens=Math.floor(x/10); log("LOG :",'tens  :'+tens);
        var m=x % 10; //alert('modulus  '+m);
        log('LOG type of number: ',typeof  x);
        if (m>0){var s1 = htmlString(digitsArray[0][m-1],0) }
                          else {s1=' '}
           s = htmlString(digitsArray[1][tens-1],1)+ s1;
         return s;
     }    
     if ( (x>99) && (x < 999) ) {
       //get index for tens
        var hundreds=Math.floor(x/100); log("LOG :",'hundreds  :'+hundreds);
        var m=x % 100; //alert('modulus  '+m);
         if (m>0){var s1 = htmlString(digitsArray[0][m-1],0) }
                          else {s1=' '}
         s = htmlString(digitsArray[2][hundreds-1],1)+ s1;
         return s;
     }    





     return s;
}

$(".input").keyup(function(){
      var str=$(this).val();
      var str=parseFloat(str);
      var txt = digit(str); 
         
     $that.siblings('.msg').html('out    ' + txt);
});

//end on document ready
});








function error(msg){
  $(this).siblings("#results").append("<li class='error'><b>ERROR</b> " + msg + "</li>");
}

});




 </script>



  
  







