 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->


<h2>Chapter 2,  Using Unicode</h2>

To obtain the Unicode value of a character of a string you can use the <strong>charCodeAt( )</strong> method of the string value. A single
parameter is an integer pointing to the zero-based position of the character within the string:

{{plain:
var code = myString.charCodeAt(3);
}}

If the string consists of only one character, use the 0 argument to get the code for that one character:
{{plain:
var oneChar = myString.substring(12, 13);
var code = oneChar.charCodeAt(0);
}}

The returned value is an integer.

To convert an Unicode code number to a character, use the <strong>fromCharCode( )</strong> method of the static String object:

{{plain:
var char = String.fromCharCode(66);
}}

Unlike most string methods, this one must be invoked only from the String object and not from a string value.

<div  class="code-block console-wrap">
<div class="code code-block">
<code>
for (var i=913;i<938;i++){
   log(i,String.fromCharCode(i));
}
</code>

</div>
<p id="msg1" class="msg"  style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results greek"></ol> 
</div>

ASCII values and Unicode values are the same for the basic Latin alphanumeric (low-ASCII) values. But even
though Unicode encompasses characters from many written languages around the world, do not expect to see
characters from other writing systems displayed in alert boxes, text boxes, or rendered pages simply because you
know the Unicode values for those characters; the browser and operating system must be equipped for the language
encompassed by the characters. If the character sets are not available, the characters generated by such codes will
be question marks or other symbols. A typical North American computer won't know how to produce a Chinese
character on the screen unless the target writing system and font sets are installed for the OS and browser.
<h3>A Unicode Digression</h3>

3.2 Unicode
How big is Unicode?
Version 3.2 has codes for 95,221 characters from alphabets, syllabaries and logographic systems.

 Uses 32 bits &#150; meaning we can store 232 = 4, 294, 967, 296 characters.
 4 billion possibilities for each character? That takes a lot of space on the computer!

Compact encoding of Unicode characters

 Unicode has three versions

- &#150; - UTF-32 (32 bits): direct representation
- &#150; - UTF-16 (16 bits): 216 = 65536
- &#150; - UTF-8 (8 bits): 28 = 256
 
How is it possible to encode 232 possibilities in 8 bits (UTF-8)?

- &#150; Several bytes are used to represent one character.
- &#150; Use the highest bit as ag:
 
- highest bit 0: single character
- highest bit 1: part of a multi byte character

&#150; Nice consequence: ASCII text is in a valid UTF-8 encoding.

<span style="font-size:48px;font-weight:bold">&#x1d36d;</span>
<span style="font-size:48px;font-weight:bold">&#x1d36f;</span>
<span style="font-size:48px;font-weight:bold">&#x1d36e;</span>
##Further Reading




  
  







