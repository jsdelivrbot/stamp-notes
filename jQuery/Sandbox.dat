 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<style type="text/css">
.code{margin:0;padding-top:0}
.code-block{                        background:url(http://localhost/codeigniter/images/code-bg.gif);
margin:0;padding:0}
.code-block .code{white-space:pre;font-family:inherit;padding:0;margin:0}
.highlight{background:yellow;}
.green{color:green}
</style>







<h2>A what you see is what you get JavaScript sandbox</h2>
When I started with these notes, it very quickly became apparent, that hard-coding each and very script in the page and then displaying it was both tiresome and also prone to errors. A much simpler approach would be to actually display the code and be able to <dfn>execute</dfn> it at the click of a button. Hence the idea of a 'scratch pad' sandbox came about.

It eventually became a jQuery plugin and I want to show you how this was developed. Feel free to download it and use it, in whichever way you wish.

<div  class="code-block clearfix"><div class="code code-block"><code>
<span class="green">//A program that executes at the click of a button ! </span>
 var timeDiff  =  {
    setStartTime:function (){
        d = new Date();
        time  = d.getTime();
        return(time);
    },

    getDiff:function (){
        d = new Date();
        return (d.getTime()-time);
    }
}
var start = timeDiff.setStartTime();
(function(n){ 
      var s='';
       for(var i=1;i&lt;n;i++){
        s = s + 'a' ;
       //log(s);
       }
}<span class="highlight">)(5000000)</span>; 

 var end = timeDiff.getDiff();
 log('i ',end,'ms');
</code>
</div>
<p id="msg1" class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>

<ol class="results"></ol> 
<img src="http://localhost/codeigniter/images/jquery.jpg" style="float:right"/>
</div>

<h3>Defining some of the requirements</h3>

Before we go deep knee into the coding part, let us define some of the requirements, as we go along, sure some others will crop-up.

- DRY, sandbox must make the development of tutorials easy, without needing to write code twice.

- We should be able to mix html and code together, so that we can use a syntax highlighter if necessary or include highlights.

- We should be able to add options

- all sections should be similar, so that if we change the plugin system must still work.


<div  class="code-block"><div class="code code-block"><code>
<span class="green">//Self Executing Anonymous Function! </span>
<span class="highlight">
</span>
eval('alert("test");');
</code>
</div>
<p id="msg1" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h2>Capturing the button click event</h2>
Our first strtegy would be to capture the click event of the button. This can easily be done with jQuery as follows:

<div  class="code-block"><div class="code code-block"><code>
<span class="green">// Capture the code!
// on button click </span>
var code;
 $('button.eval').click(function(){
    code=$(this).siblings('.code').text();
  });
out(code);
</code>

</div>
<p id="msg1" class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h2>Executing the code with eval()</h2>
<div  class="code-block"><div class="code code-block"><code>
<span class="green">// Capture the code!
// on button click 
// execute code via eval()</span>
$('button.eval').click(function(){
    code=$(this).siblings('.code').text();
    alert(code);
    eval(code);
  });

</code>

</div>
<p id="msg1" class="message" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>


<h3>Capturing the html</h3>

<div  class="code-block"><div class="code code-block"><code>
<span class="green">// Capture the code!
// on button click 
// execute code via eval()</span>
$('button.eval').click(function(){
    code = $(this).siblings('.code').text();
    html = $(this).parent('.code-block').html();
   alert('code');
    eval(code);
  });
</code>
</div>
<p id="msg1" class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Adding an output area</h3>

<div  class="code-block"><div class="code code-block"><code>
<span class="green">// Capture the code!
// on button click 
// execute code via eval()</span>


$('button.eval').click(function(){
     $that=$(this);
    code = $(this).siblings('.code').text();
    html = $(this).parent('.code-block').html();
     <span class="green">// clears output area on click as well </span>
     function out(msg){
        $output = $that.siblings('.msg').text(msg);
     }
     
     out('a test');
     eval(code);
 });
 
</code>
</div>
<div class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Adding a Logger Area and Assertions</h3>

<div  class="code-block"><div class="code code-block"><code>
<span class="green">// Capture the code!
// on button click 
// execute code via eval()</span>
$('button.eval').click(function(){
    try {
        $that=$(this);
        code = $that.siblings('.code').text();
        html = $that.parent('.code-block').html();
        <span class="green">// clears output area on click as well </span>
        function out(msg){
            $output = $that.siblings('.msg').text(msg);
        }
        $that.siblings(".msg").text('');
        $that.siblings(".results").text('');
        function log(){
            var msg = '';
            var s = '';
            for ( var i = 0; i < arguments.length; i++ ) {
                if ((i==0) || (i===arguments.length-1)){ 
                    s ='';
                }else{
                    s=", "
                    }
                msg += " " + arguments[i] + s;
            }
            $that.siblings(".results").append("&lt;li  class='LOG'&gt;&lt;b&gt;LOG&lt;/b&gt; " + msg  +  "&lt;/li&gt;");
        }
        function assert(pass, msg){
            var type = pass ? "PASS" : "FAIL";
            var result='&lt;li class=" ' + type + ' "&gt;&lt;b&gt;' + type + "&lt;/b&gt; " 
            + msg + "&lt;/li&gt;";
            $that.siblings(".results").append(result).fadeTo('fast','0.35').fadeTo('fast','1.0');
            return result;
        }
        <span class="green">// an error logger could be refactored with log</span>
        function error(msg){
            $that.siblings(".results").append("&lt;li class='error'&gt;&lt;b&gt;ERROR&lt;/b&gt; " + msg + "&lt;/li&gt;");
        }
        out('a test');
        log('log :', 'one','two', 'three');
        assert(typeof $that, 'True');
    
        var colours = [];
        colours[2] = "red"; 
        eval(code);
    } catch (e) {
        error("An exception occurred in the script. Error name: " + e.name 
            + ". Error message: " + e.message + '   '+e.lineNumber); 
    }
    
    
});
 


 
</code>
</div>
<div class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Final Enhancements</h3>

We can add and change the looks, obviously by using CSS, or by simply adding options to our functions and objects. We can also turn the whole of the code into a huge object. A small enhancement that I thought might be useful, is the ability to toggle both the output as well as the code, in order to allow the user to have a better overview of the contents for long sections.

Another enhancement would be to place the output into a different tab for very long outputs. I will experiment more with those on version two and let you be the judge.



##Further Reading


<script type="text/javascript">
$(document).ready(function(){
  $('button.eval').after('<img src="http://localhost/codeigniter/images/download_01.png" style="float:right" />');
  $('button.eval').click(function(){
   var code=$(this).siblings('.code').text();
   $that=$(this);
    //clear logger before output
   $that.siblings(".results").text('');
   eval(code);
 
  function assert(pass, msg){
     var type = pass ? "PASS" : "FAIL";
     var result='<li class=" ' + type + ' "><b>' + type + "</b> " 
         + msg + "</li>";
     $that.siblings(".results").append(result).fadeTo('fast','0.35').fadeTo('fast','1.0');
     return result;
   }
 function log(){
  var msg = "";
  for ( var i = 0; i < arguments.length; i++ ) {
    msg += " " + arguments[i];
  }
  $that.siblings(".results").append("<li class='LOG'><b>LOG</b> " + msg + "</li>");}

  }

);



$(".input").keyup(function(){
    var pattern=$(this).siblings('.regex').val(); 
    var str=$(this).val();
     s=isValid(str,pattern);
    //alert(str);
     $(this).siblings('.msg').text('s');
});

$(".regex").keyup(function(){
    var str=$(this).siblings('.input').val();
    var pattern=$(this).val();
     s=isValid(str,pattern);
     $(this).siblings('.msg').text(s);
    // alert(pattern);
});



function error(msg){
  $(this).siblings("#results").append("<li class='error'><b>ERROR</b> " + msg + "</li>");
}



});

 </script>


Online similar to codepad

http://www.sphere-research.com/en/


http://www.ideone.com/api
  







  