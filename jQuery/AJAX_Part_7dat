 <!--
{{feature: .. The take home message: seek the signal, avoid the noise, and do your own homework .. zerohedge.com}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: UI, jQuery, Visibility Filters, CSS Visibility }}
{{snippet:using CodeIgniter's file_helper class}}

-->

<style type="text/css">

.sales1{color:red}
ul.ex {font-size:13px;display:block}
ul.ex {list-type:none;list-style-type:none}
ul.ex li, ul.ex1 li{display:block;width:90%;border:1px solid #ececec;margin-bottom:1px}
ul.ex li span{cursor:pointer}
div#load{width:30%;float:none;background:#dd0000;color:#fff}
</style>



<h3>Security Limitations</h3>
For all its utility in crafting dynamic web applications, XMLHttpRequest (the
underlying browser technology behind jQuery's AJAX implementation) is subject to strict boundaries. To prevent various cross-site scripting attacks, it is not generally possible to request a document from a server other than the one that hosts the original page.

This is generally a positive situation. For example, some cite the implementation of JSON parsing by using eval() as insecure. If malicious code is present in the data file, it could be run by the eval() call. However, since the data file must reside on the same server as the web page itself, the ability to inject code in the data file is largely equivalent to the ability to inject code in the page directly. This means that, for the case of loading trusted JSON files, eval() is not a significant security concern.

There are many cases, though, in which it would be beneficial to load data from a third-party source. There are several ways to work around the security limitations and allow this to happen.

One method is to rely on the server to load the remote data, and then provide it when requested by the client. This is a very powerful approach as the server can perform pre-processing on the data as needed. For example, we could load XML files containing RSS news feeds from several sources, aggregate them into a single feed on the server, and publish this new file for the client when it is requested.

To load data from a remote location without server involvement, we have to get a bit sneakier. A popular approach for the case of loading foreign JavaScript files is injecting&lt;script&gt; tags on demand. Since jQuery can help us insert new DOM elements, it is simple to do this:

{{plain:
$(document.createElement('script'))
.attr('src', 'http://example.com/example.js')
.appendTo('head');
}}

In fact, the $.getScript() method will automatically adapt to this technique if it detects a remote host in its URL argument, so even this is handled for us.

The browser will execute the loaded script, but there is no mechanism to retrieve results from the script. For this reason, the technique requires cooperation from the remote host. The loaded script must take some action, such as setting a global variable that has an effect on the local environment. Services that publish scripts that are executable in this way will also provide an API with which to interact with the remote script.

Another option is to use the &lt;iframe&gt; HTML tag to load remote data. This element allows any URL to be used as the source for its data fetching, even if it does not match the host page's server. The data can be loaded and easily displayed on the current page. Manipulating the data, however, typically requires the same cooperation needed for the &lt;script&gt; tag approach; scripts inside the &lt;iframe&gt;
need to explicitly provide the data to objects in the parent document.


<h3>Executing a script using $.getScript()</h3>


<div  class="code-block console-wrap">
<div class="code">

<code>
$('#ajax-button').click(function(){
   $('&lt;div id="load"&gt; loading ....&lt;/div&gt;').prependTo('#msg1')
       .ajaxStart(function(){
         $(this).show();
       }).ajaxStop(function(){
           // $(this).hide();
        });
     $('#msg1').load('/CodeIgniter/js/a.html');
     return false;
});

</code>

</div>

<div  id="msg1" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button">Load Data!</button>

<ol class="results"></ol> 
</div>

<hr/>

<h3>Small Enhancements, fading in the new content</h3>

We can create a small enhancement here by making the loaded content fade into view rather than appear suddenly. The .load() can take a callback to be fired
on completion:

<div  class="code-block console-wrap">
<div class="code">

<code>
$('#ajax-button-01').click(function(){
   $('&lt;div id="load"&gt; loading ....&lt;/div&gt;').prependTo('#msg2')
       .ajaxStart(function(){
         $(this).show();
       }).ajaxStop(function(){
           // $(this).hide();
        });
     $('#msg2').load('/CodeIgniter/js/a.html', function(){
            $(this).fadeOut('slow').fadeIn('slow');
      });
     return false;
});

</code>

</div>

<div  id="msg2" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-01">Load Data!</button>

<ol class="results"></ol> 
</div>


