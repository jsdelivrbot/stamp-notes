


<h3>Longest Biased Interval</h3>

The Longest Biased Interval is a pattern search algorithm that given a data sequence, e.g. 

<pre><code>ACGTAGCAGATAGACAGGTTAGACAATAGAG</code></pre>


and a "bias" criterion, e.g. "at least 2/3 AT-rich", finds the longest contiguous interval (substring) that satisfies this criterion.

For example  Plasmodium falciparum causes malaria. Its DNA is 80% AT, and contains repetitive patterns. It is also  highly [compressible] compared to ''most'' other DNA.  Allison's paper describes these routines.

\begin{codeblock}
/* Find a longest interval of data s.t. the interval contains
at least a certain fraction of chars from choice.
O(n)-time, always,  O(n)-space worst case.
Based on Lloyd Allison, 2002, Monash University, Australia
Modified Dr.Y Lazarides, 2009
*/

function lloyd1(p, q, data, choice) {
  //validate input
  if (p < 0 || q < 0 || p > q || p + q < 1) {
    $that.siblings('.msg').text('bad values for p, q');
    return;
  }

  var fraction = p / q,
  good = q - p,
  bad = p;

  var $z = '';
  $z = 'at least ' + (fraction * 100).toFixed(2) + '% of ' + choice + '\n';

  // begin longest biased interval algorithm  see (L. Allison 3/2002)
  var i, A = []; // set up array of weights, +good and -bad.
  for (i = 0; i < data.length; i++) {
    A[i] = choice.indexOf(data.substring(i, i + 1)) >= 0 ? good : -bad;
  }

  var C = [],
  // cumulative sums
  first = [],
  // first occurrence of a given sum
  minC = 0; // smallest sum seen so far
  C[-1] = 0; // NB JavaScript can use -ve subscripts
  first[0] = -1;

  var begins = 0,
  ends = -1; // best interval so far
  for (i = 0; i < A.length; i++) {
    C[i] = C[i - 1] + A[i]; // cumulative
    if (C[i] < minC) // ? new low point ?
    {
      var j;
      for (j = minC - 1; j >= C[i]; j--) {
        first[j] = i;
      }
      minC = C[i];
    }

    var x = (C[i] >= 0 ? -1 : first[C[i]]) + 1;
    if (i - x > ends - begins) // ? longer ?
    {
      begins = x;
      ends = i;
    }

  }

  // output
  $z += 'interval = ' + begins + '..' + ends + ' (' + (ends - begins + 1) + ')';
  $z += '\n' + data.substring(0, begins) + '[' + data.substring(begins, ends + 1) + ']' + data.substring(ends + 1);
  log('longest interval',$z);
}

// we separate the input form the output here
// p=2, q=3, S=data;
lloyd1(2, 3, 'ACGTAGCAGATAGACAGGTTAGACAATAGAG', 'AT');

\end{codeblock}

<h3>Comments</h3>
A routine like this can easily be changed to read a file from the server via Ajax or via http form another website. I have tried to separate the logic from the input and output, so that you can use the routine directly into a different interface and this was the primary aim of this page.




##Further Reading



 



  
  







