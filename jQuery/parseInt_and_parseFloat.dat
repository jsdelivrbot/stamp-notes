 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<style type="text/css">
.edit-code{font-size:12px;line-height:1.3}
</style>

##What is self?
For all windows, the _self_ and _window_ properties of a window object are synonyms for the current window. For example, you can close the current window by calling the close method of either window or self. You can use these properties to make your code more readable or to disambiguate the property reference self.status from a form called status.

<div  class="code-block console-wrap">
<div class="code code-block">
<code class="editable">
log(window['self']); // true
log(window == self); // true
log(window === self); //false

self.close();
</code>

</div>

<div  class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

self has also become a defacto standard name for keeping reference to an object for closures.

Here we create a closure to pass to _setTimeout()_. When that closure is executed, this will refer to the global object. To keep a reference to the foo object doLater was originally called on, a var named self is used. It could be anything but 'self' has meaningful semantics.


<div  class="code-block console-wrap">
<div class="code code-block">
<code class="editable">
var Foo = function (){};
Foo.prototype.doLater = function() {
    var self = this; // current object
    window.setTimeout(function() { log (':)') }, 1000);
};

var f = new Foo().doLater();
</code>
</div>
<div  class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>




http://stackoverflow.com/questions/3216428/self-property-in-javascript

















                            