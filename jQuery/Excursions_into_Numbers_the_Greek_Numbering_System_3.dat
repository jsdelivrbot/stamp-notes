 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<style type="text/css">
.code{margin:0;padding-top:0}
.code-block{                        background:url(http://localhost/codeigniter/images/code-bg.gif);
margin:0;padding:0}
.code-block .code{white-space:pre;font-family:inherit;padding:0;margin:0}
.highlight{background:yellow}
.green{color:green}
.greek  { font-family: Aristarcoj, Cardo, "ALPHABETUM Unicode", "Arev Sans", AttikaU, BosporosU, "CMU Serif",
	 CODE2000, "DejaVu Serif", Dioxipe, "Galilee Unicode Gk", "Gandhari Unicode",
	"Hindsight Unicode", KadmosU, "New Athena Unicode"; font-size: 100% }
.eval{margin:5px}
h2{line-height:1.2}
</style>



<h2>Excursions into Numbers, the Greek Numbering System Part &gamma;</h2>

I believe in minimalist User Interfaces. A good UI should demand as little as possible from a user. Let us now morph, our little exercise book, so that a user just types a number and we can immediately give him the results based on the <i>keyup()</i> event.

<div  class="code-block"><div class="code code-block"><code><span class="green">//Greek Numbers Converter! </span></code></div>
<form id="calc" name="calc"> 
<p id="msg" class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">Greek Number : 
</p>
<input size=24 maxLength=24 name="" class="input" />
 <ol class="results"></ol>
</form> 
<button class="eval">Run Code!</button>
 </div>
<hr/>

<h3>Capturing the keypress() event</h3>
The event is captured using jQuery's built-in method keyup().
{{plain:
$(".input").keyup(function()&#123;
      var num = $(this).val();
             num = parseFloat(num);
      var out = getGreekNumber(num); 
      $('#msg').html(' Greek Number : ' +  txt);
 &#125;);
}}

Note the <strong>keyup()</strong>method is all lower case. This always catches me, as most of other functions are camel notation.
<hr/>

<script type="text/javascript">
$(document).ready(function(){

  $('button.eval').click(function(){
   var code=$(this).siblings('.code').text();
    $that=$(this);
    //clear logger before output
   $that.siblings(".results").text('');
   //eval(code);
   //var txt = getGreekNumber(str); 
    
  function assert(pass, msg){
     var type = pass ? "PASS" : "FAIL";
     var result='<li class=" ' + type + ' "><b>' + type + "</b> " 
         + msg + "</li>";
     $that.siblings(".results").append(result).fadeTo('fast','0.35').fadeTo('fast','1.0');
     return result;
   }
 function log(){
  var msg = "";
  for ( var i = 0; i < arguments.length; i++ ) {
    msg += " " + arguments[i];
  }
  $that.siblings(".results").append("<li class='LOG'><b>LOG</b> " + msg + "</li>");
}

function htmlString(unicodeDigit, diagritic){
  var s='&#697;'  ; var s1='';
   if (diagritic==1)  {
      s1 ='&#885;' ;
      s='';
  }
   return   s1+ '&#' + unicodeDigit + ';' + s ;
}

// d1  = divisor
// m1 = x/d1  number/divisor  
 
function getNumberString(m1, d1){
var digitsArray = new Array(
    new Array( 945, 946, 947, 948, 949, 987, 950, 951, 952),
    new Array( 953, 954, 955, 956, 957, 958, 959, 960, 985),
    new Array( 961, 963, 964, 965, 966, 967, 968, 969, 993)
);

digitsArray[3]=digitsArray[0];
digitsArray[4]=new Array( 945, 945, 945, 945, 945, 945, 945, 945);
var m=0;var diagritic=0;
var codeString='';
var s='';
if (d1 == 10000){
   m = 4;
   diagritic = 0;
}
if (d1 == 1000){
   m = 3;
   diagritic = 1;
}
if (d1 == 100){
    m = 2;
}
if (d1==10) {
  m = 1 ;
}
if (d1==1) {
  m=0;
}
  log('in getNumberString  d1   m1  : ', d1, '  ', diagritic);
 if ((m1<10) && (d1<100000)) {
      if ((m1-1<0)) {
        codeString='';
       }
       else {
         codeString = htmlString(digitsArray[m][m1-1], diagritic);
      };
 }
  // log('html : ', codeString);
return codeString;
}




function getGreekNumber( x )
{

    var divisor = 100000; var s=' '; var  s1=''; var i=0;
    var remainder=0; 
    log('In function getGreekNumber : ', x );
    for (j = 0; j<6; j++) {
       var m = Math.floor(x/divisor);
       if (m>=0) {
             s = getNumberString(m,divisor);
       }; 
      remainder = x  %  divisor;
    
      x = remainder;
       s1 = s1 + s;
           
      log('loop :  m,   remainder,  divisor,   html  ' , m ,'   ', remainder, '  ', j , '   ', divisor, '   ', s);

      divisor = divisor/10;
    } 
return s1;

}

// input based on keyup function
$(".input").keyup(function(){
      var str=$(this).val();
      var str=parseFloat(str);
      var txt = getGreekNumber(str); 
     // $(this).siblings('.msg').html(' Greek Number : ' +  txt);
     $('#msg').html(' Greek Number : ' +  txt);
 });

//end activate button



function error(msg){
  $(this).siblings("#results").append("<li class='error'><b>ERROR</b> " + msg + "</li>");
}

//end of document ready
});

});



 </script>



  
  







  