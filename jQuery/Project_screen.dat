<!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<script type="text/javascript">
$(document).ready(function(){
 $('#saveasform').submit(function(){
    alert('succesful');
    return false;
 });
)};
</script>

<style id="firststyle"> 
    .goog-tabpane {
      background: threedface;
      padding: 5px;
      position: relative;
      width:95%;
      margin:0 auto;
    }
 
    .goog-tabpane-tabs {
      list-style: none;
      margin: 0px;
      padding: 0px;
      height: 1ex;
      position: relative;
    }
 
    .goog-tabpane-left .goog-tabpane-tabs {
      float: left;
    }
 
    .goog-tabpane-right .goog-tabpane-tabs {
      float: right;
    }
 
    .goog-tabpane-cont {
      overflow: auto;
      background: threedface;
      border: 1px solid;
      border-color: threedhighlight threedshadow threedshadow threedhighlight;
      padding: 2px;
      height: 800px;
    }
 
    .goog-tabpane-tab, .goog-tabpane-tab-selected {
      display: block;
      padding: 0px 3ex;
      background: threedface;
      border: 1px solid;
      margin: 0px;
    }
 
    .goog-tabpane-top .goog-tabpane-tab,
    .goog-tabpane-top .goog-tabpane-tab-selected,
    .goog-tabpane-bottom .goog-tabpane-tab,
    .goog-tabpane-bottom .goog-tabpane-tab-selected {
      float: left;
    }
 
    .goog-tabpane-top .goog-tabpane-tab,
    .goog-tabpane-top .goog-tabpane-tab-selected {
      border-color: threedhighlight threedshadow threedface threedhighlight;
    }
 
    .goog-tabpane-bottom .goog-tabpane-tab,
    .goog-tabpane-bottom .goog-tabpane-tab-selected {
    border-color: threedface threedshadow threedshadow threedhighlight;
    }
 
    .goog-tabpane-left .goog-tabpane-tab,
    .goog-tabpane-left .goog-tabpane-tab-selected {
      border-color: threedhighlight threedface threedshadow threedhighlight;
    }
 
    .goog-tabpane-right .goog-tabpane-tab,
    .goog-tabpane-right .goog-tabpane-tab-selected {
      border-color: threedhighlight threedshadow threedshadow threedface;
    }
 
    .goog-tabpane-top .goog-tabpane-tab {
      margin-top: 3px;
    }
 
    .goog-tabpane-tab-selected {
      font-weight: bold;
    }
 
    .goog-tabpane-tab-selected,
    .goog-tabpane-tab-selected {
      padding-bottom: 2px;
      padding-top: 2px;
    }
 
    .goog-tabpane-top .goog-tabpane-tab-selected {
      position: relative;
      top: 1px;
    }
 
    .goog-tabpane-bottom .goog-tabpane-tab-selected {
      position: relative;
      top: -1px;
    }
 
    .goog-tabpane-left .goog-tabpane-tab-selected {
      position: relative;
      left: 1px;
    }
 
    .goog-tabpane-right .goog-tabpane-tab-selected {
      position: relative;
      left: -1px;
    }
 
    #tabpane2 .goog-tabpane-tab {
      margin-top: 0px;
    }
 
    p {
      margin-top: 0px;
    }
 
</style> 


<script type="text/javascript">
goog.require('goog.string');
goog.require('goog.ui.TabPane');
</script>

##Main Project Screen

Most of the MEP objects require information about the Project. A simple mock-up object is shown next. A more detailed class is to be developed, once the components are more advanced.

###Workflow

A new component page is made normally as a post. However, there are some conventions. Areas contained between _component_, saved code blocks and saved css can be uploaded to server and re-used later on, in other sections of the Application. If there are models, scaffolding can be build.

<div  class="code-block console-wrap"><div class="code-block code"><code>
/**
 *   Project related components
 */
function Project (obj){
// defaults are used to highlight
// missing info and for testing
 var defaults = {
   version : '1.0',
   number : 'HS-118',
   name : 'City Center Phase III',
   location:'Doha, Qatar',
   description: 'Lorem ipsum dolor sit amet, consectetuer ...',
   team : {},
   divisions : {},
   prefix: 'project',
   filename:'project.js', //persistent storage for changes
   view:'/CodeIgniter/data/tabpane.html'
  }
 
 this.settings = {};

 // extend object
 for (var prop in defaults){
  if (defaults.hasOwnProperty(prop)){
    this.settings[prop]=defaults[prop];
    if (obj!==undefined && obj[prop]!==undefined){this.settings[prop]=obj[prop];};
  }
 }


 this.get = function (){
   // gets values from server
 }

 this.save = function (){
  // saves values to server
 }

this.populate = function (){
 var tempS = '';
 for (var prop in this.settings){
   tempS ='#'+this.settings.prefix + prop.capitalize();
   $(tempS).val(this.settings[prop]);
 }
}

this.view = function (url,callback){
  $('#pane').load(url,callback);
};

};

// set some option parameters
// 
var options = {
 name : 'North Gate Development',
 number: 'HS-126',
}
// create new project
project = new Project(options);

//log(project.settings.name);
//log(project.settings.number);

project.settings.number='HS-226';
project.view(project.settings.view, function(){project.populate()});
//log(project.settings.view)
$('#code1').val(z);
$('#filename').val(project.settings.filename);
var t=$('#firststyle').html();
//log(t);
</code>
</div>
<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>

<form id="saveasform1" name='saveasform1' style="display:block;float:right" >
<input type="text" id="filename" name="filename" value='sample.js'/>
<input type="button"  class="small_button" id="saveAsJS" value="Save As JS"/>
<textarea id="code1" name='code1' hidden>testing</textarea>
</form>

<ol class="results"></ol> 
</div>


<hr/>
<div id="pane" class="clearfix"></div>     


###Notes

So far we are on the right direction. Still we need to think about splitting, between model, view controller and for a new component, actually _save_ the raw template to the server. This way everything can be arranged from the console here.

We also need to save into a new page. This should not be too difficult. We save the JavaScript under its own name and the rest under data using editpost.

So far we have used a very simplistic model for encoding the url and sending it to the server, using jQuery. More comprehensive routines can be found in Closure's library. The components though a bit bloated can be used to build a truly [RESTful API](http://en.wikipedia.org/wiki/Representational_State_Transfer#RESTful_web_services). 


<div  class="code-block console-wrap"><div class="code-block code"><code>
$(document).ready(function(){
     $('#saveAsJS').click(function(){
       $(this).css({'color':'blue'});
       $(this).val('Saved as JS');
       var thefilename=$('#filename').val();
       log('saving ... '+thefilename);
       var apiUrl="/CodeIgniter/admin/api/save/js/"+thefilename;
       log('sending request ...'+apiUrl);
       var dataString = "code1="+encodeURIComponent($('#code1').val())+' ';
       // alert (dataString);
      //$('#saveasform1').submit();
       $.ajax({
          type: "POST",
          url: apiUrl,
          data: dataString,
         success: function(msg) {
              log(msg);
             // alert( "Data Saved: " + msg );
         }
      });
      return false;
   });

  
   $('#left-menu').text('');
   $('#left-menu').width('150px');
   $('#left-menu').height('1000px');
});
</code>
</div>
<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>








 
 
  






















<span id="chapter" class="hidden">3</span>
##Further Reading
                                                                                                                                                                                                                                                                                                                          