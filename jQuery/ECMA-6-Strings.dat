\chapter{ECMA 6 Strings}

JavaScript strings have always lagged behind similar features of other languages. It was only in ECMAScript 5 that strings finally gained a `trim()` method, and ECMAScript 6 continues extending JavaScript’s capacity to parse strings with new functionality.\footnote{Making loading libraries unecessary.}

\begin{codeblock}

"use strict";

var msg = "\\\\Hello world!";

assert(msg.startsWith("Hello"),'starts with "Hello"');       // true
assert(msg.endsWith("!"));             // true
assert(msg.includes("o"));             // true

assertFalse(msg.startsWith("o"),'Does not start with "o"');   // false
assert(msg.endsWith("world!"),'Ends with World');             // true
assert(msg.includes("x"));             // false

assert(msg.startsWith("o", 4));        // true
assert(msg.endsWith("o", 8));          // true
assert(msg.includes("o", 8));          // false

assert(msg.includes("\\\\Hello"));          // false

\end{codeblock}

The first three calls don’t include a second parameter, so they’ll search the whole string if needed. The last three calls only check part of the string. The call to msg.startsWith("o", 4) starts the match by looking at index 4 of msg (which is the “o” in “Hello”); the call to msg.endsWith("o", 8) starts the match at index 4 as well because the 8 argument is subtracted from the string length (12); the call to msg.includes("o", 8) starts the match from index 8 (which is the “r” in “world”).

While these three methods make identifying the existence of substrings easier, each only returns a boolean value. If you need to find the actual position of one string within another, use the `indexOf()` or `lastIndexOf()` methods.