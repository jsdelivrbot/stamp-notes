
<h2>Using a Variable Number of Arguments in a Function</h2>

JavaScript, as a whole, is very flexible in what it can do and much of that flexibility defines the language, as we know it, today.

Many languages offer variadic function:

\begin{codeblock}

  static function (a, b, c ="something") {
  
  }
\end{codeblock}  
  

In many instances to make a system more flexible we may want to have a variable number of arguments in a function. Such a function is called a <em>{{wi:variadic}} function</em> that is, its <em>{{wi:arity}}</em> is not fixed.

Javascript will not complain but just return <em>'undefined'</em>,  if we actually send more or less arguments onto a function. Consider this:

\begin{codeblock}
// Testing variadic functions
function merge(root1, root2, root3, root4){ 
    var root = root1 + root2 + ' ' + root3 + ' ' + root4;
    return root; 
} 
log('abcd : ', merge("a","b","c", "d")); 
log('ab :  ',  merge("a","b"));
\end{codeblock}


\section{A variadic function}

Let us try one more example in order to conclude this short tutorial.

\begin{codeblock}
function merge(root){ 
  for ( var i = 0; i < arguments.length; i++ ) 
    for ( var key in arguments[i] ) 
      root[key] = arguments[i][key]; 
  return root; 
} 
 
var merged = merge({name: "John"}, {city: "Boston"}); 
assert(typeof merged == "object", "The merged var is an object");
assert( merged.name == "John", "The original name is intact." ); 
assert( merged.city == "Boston", "And the city has been copied over." );
\end{codeblock}



  
  







  