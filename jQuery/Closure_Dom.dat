 <!--
{{feature-image:http://localhost/egypt/martin-schoeller/adrian_brody_2003.jpg}}
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<script>
goog.require('goog.dom');
goog.require('goog.dom.selection');
</script>

<h2>Closure's Dom Manipulation</h2>
Closure's Dom manipulation methods, are comprehensive and to have given extensive thought to browser differences. As noted in the file comments they took heavy inspiration from [mochikit](http://mochikit.com/). Unfortunately, the Programmer has to deal with verbosity.
 
Although as mentioned in the documentation you can always create your own aliases, what is obviousy missing is 

- Simplicity in the API
- A good Selector Engine and API

In my opinion here is an area, where jQuery excels. I will be highlighting differences as we go along.

To use the relevant classes, you need to invoke:

{{snippet:
goog.require('goog.dom');
goog.require('goog.dom.selection');
}}

Just to recall we can select an element with an id using native Browser methods:

{{plain: getElementById(anId)}}

Libraries wrap these functions and provide selector methods to ease this process. Google's Closure wraps this method in:

{{plain: goog.dom.dom(anId)}}

They have also provided an alias using the ($) which is a common technique used by other libraries. This is good in that you can be in familiar territory if you coming from another library background. 

But, before we get into further details let us check that the library has loaded, we can do tis by using an __assert__ and checking if goog.dom is not undefined.

<div  class="code-block console-wrap" title="Checking if DOM Library loaded">
<div class="code-block code">
<code>
(function testDom() {
  assert(typeof goog.dom != undefined, 'Dom library exists');
})();
</code>
</div>

<div  id ="testEl" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

First let us see how we can fetch an element from the Dom, the hello world of all Dom manipulation libraries.

<div  class="code-block console-wrap" title="Capturing an element using its id">
<div class="code-block code">
<code>
var z = goog.dom.$('msg1');

(function testDom() {
  assert(typeof goog.dom != 'undefined', 'Dom library exists');
  assert(z instanceof HTMLElement, 'is instance of HTMLElement');
})();
</code>
</div>

<div  id ="testEl" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>


<h3>Selecting by Tag name and Class</h3>

The second method we are going to examine is a method that allows you to select elements by tag name or tag name and class. We will use this method to count all the __li__ elements of this page and we will use the same method to count all the div elements with the class code-block.
<div  class="code-block console-wrap" title="Capturing an element using tag name and or class">
<div class="code-block code">
<code>

var z1= goog.dom.getElementsByTagNameAndClass ('li');
var z2= goog.dom.getElementsByTagNameAndClass ('div','code-block');

t={};
t.tag={};
var  t.tag = goog.dom.getElementsByTagNameAndClass;

z1=t('li');

log(z1.length);
log(z2.length);


</code>
</div>

<div  id ="msg1" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

So far we are in familiar territory and although the name-spacing is quite verbose one could alias it to shorter variables, if you commit to the library.

<h3>Setting the Inner HTML</h3>

Simplest method is as follows 
<div  class="code-block console-wrap">
<div class="code-block code">
<code>
var sandbox = goog.dom.$('sandbox');
var s = '<' + 'button id="foo" title="Hello!" value="bar"' + ' > ' + 'Foo Button ' + ' <' + '/button>\n';
s += '<' + 'button id="disabledButton" value="foo" disabled' + '> ' + 'Disabled' + ' <' + '/button' + '>';
sandbox.innerHTML = s;

</code>
</div>
<div  id ="msg" class="msg">
</div>
<DIV id="sandbox" class="sandbox curvy" style="border:1px solid #ececec;width:85%"></DIV>
<div id="log" class="console" style="white-space:pre"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Conclusion</h3>

So far the dom library routines have failed to impress me. You are probably better off using dom native browser routines with limited wrapping. However, in the next articly when we examine the dom.query things might get a bit better.

{{warning: Just watch out if you are going to use Closure and jQuery together for DOM manipulation, now and then they alias to ($)}}



<span id="chapter" class="hidden">11</span>
##Further Reading





  
  







                                          