 <!--
{{feature: .. The take home message: seek the signal, avoid the noise, and do your own homework .. zerohedge.com}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: UI, jQuery, Visibility Filters, CSS Visibility }}
{{snippet:using CodeIgniter's file_helper class}}

-->

<style type="text/css">

.sales1{color:red}
ul.ex {font-size:13px;display:block}
ul.ex {list-type:none;list-style-type:none}
ul.ex li, ul.ex1 li{display:block;width:90%;border:1px solid #ececec;margin-bottom:1px}
ul.ex li span{cursor:pointer}
</style>



<h3>Ajax, adding magic to HTML</h3>

<p>In the previous parts on Ajax, jQuery functions, you saw a number of the Ajax functions available in jQuery:</p>

 - load()
 - $.get()
 - $.post()
 - $.getJSON()

These functions are good as quick Ajax solutions, but they are not complete solutions. What if you want to set a timeout period for your Ajax request? What if you want to handle any errors returned by an operation?

For these tasks and more, jQuery provides the full fledged $.ajax() function. This function gives you the full power of Ajax, while still staying in jQuery. This article is all about $.ajax().

<quote>
..and in doing this simple task it will usher in the next version of the World Wide Web itself.
 </quote>

<h3>Getting data from the server using $.ajax()</h3>


<div  class="code-block console-wrap">
<div class="code code-block">

<code>
//jQuery.globalEval(alert('hello'));
//window.print();
//alert();
function sref() { 
    for (var prop in document.styleSheets[0]){
          log('prop   ', prop,  document.styleSheets[0][prop] );
   }
     return document.styleSheets[0].href; 
    }
var z = sref();
log('you have stylesheets ', z );

function callback(data, status)
{
alert(data);
alert(status);
$that.siblings('.fullresponse').html(data);
}

$.ajax({
    type : "GET",
    url : "/CodeIgniter/Blogs/ajax_post/",
    success: callback
});


</code>

</div>

<div  class="msg">
 </div>
<div  class="sales1" style="width:98%">Blue Json</div>
<div class="fullresponse" style="width:98%">Something</div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<hr/>


<h3>Handling Errors</h3>

Sometimes things will go wrong when you're working with Ajax. For example the resource you might be trying to load from the server might not be there, or there maybe no connection to the Internet.

The $.ajax(0 function lets you handle errors with a callback function that's called when an error occurs. You can connect the error callback function to the $.ajax() function using the <em>error</em> option and put error handling code into the callback function.

The error calllback function is passed three items: the XMLHttprequest object, a string that contains the error description, and an exception object.

In the following example, we'll try to access a resource on the Web that isn't actually there and handle the error with code in an error handler.


<div  class="code-block console-wrap">
<div class="code">

<code>
$.ajax({
    type : "GET",
    url : "../CodeIgniter/Blogs/ajax_post1/",
    data:{data:1},
    success: callback,
    error: err
});

function callback(data, status)
{
  $that.siblings('.fullresponse').html(data);
}

function err(xhr, reason,ex)
{
  reason = '&lt;div class="error"&gt;' + reason + '&lt;/div&gt;';
  $that.siblings('.fullresponse').html(reason);
}
</code>

</div>

<div  class="msg" class="msg">
 </div>
<div  class="sales1" style="width:98%">Blue Json</div>
<div class="fullresponse" style="width:98%">Something</div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Adding timeouts</h3>
At times, you may not want to wait for an Ajax operation to complete if it's taking too long: for example, the resource you're trying to reach may not be available.

You can specify a timeout in milli-seconds with the <tt>timeout</tt> property of the $.ajax() function. This example just does that timing out after 1000 milliseconds.

<div  class="code-block console-wrap">
<div class="code">

<code>
$.ajax({
    type : "GET",
    url : "/CodeIgniter/Blogs/ajax_post/",
    //data:{data:1},
    success: callback,
    timeout: 10000,
    error: err
});

function callback(data, status)
{
  $that.siblings('.fullresponse').html(data);
}

function err(xhr, reason,ex)
{
  reason = '&lt;div class="error"&gt;' + reason + '&lt;/div&gt;';
  $that.siblings('.fullresponse').html(reason);
}
</code>

</div>

<div  class="msg" class="msg">
 </div>
<div  class="sales1" style="width:98%">Blue Json</div>
<div class="fullresponse" style="width:98%">Something</div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Sending Data with the url</h3>

<div  class="code-block console-wrap">
<div class="code">

<code>
function myAjax(picNo){
$.ajax({
    type : "POST",
    url : "/CodeIgniter/Blogs/ajax_post/"+picNo,
    //data:{data:1},
    success: callback,
    timeout: 10000,
    error: err
});
}


function callback(data, status)
{
  $that.siblings('.fullresponse').append(data);
}

function err(xhr, reason,ex)
{
  reason = '&lt;div class="error"&gt;' + reason + '&lt;/div&gt;';
  $that.siblings('.fullresponse').html(reason);
}

function test(){
for (var i=1;i<5;i++){
    myAjax(i);
}
}

var intervalID;

function loadPics()
{
  // function name not name()
  intervalID = setInterval(test, 1000);
}

loadPics();

</code>

</div>

<div  class="msg" class="msg">
 </div>
<div class="fullresponse" style="width:98%"></div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

I have kept the code at its minimum to show you the basic principles. A more industrial strength approach will be necessary both to protect the Server, if we are pulling the images from a database and also to produce a fail-safe system in a better way.

We might also want to only query the server if something has changed or at regular intervals. We also need to inncrease the sophistication of our script on the Server side. So far it has only be a simple case of returning static information.

<h3>Setting Intervals</h3>

Let us now try and see if we can use an interval to continually, query the server.
We will use first the <tt>setInterval() </tt> function. 

<div  class="code-block console-wrap">
<div class="code">

<code>
function myAjax(picNo){
$.ajax({
    type : "POST",
    url : "/CodeIgniter/Blogs/ajax_post/"+picNo,
    //data:{data:1},
    success: callback,
    timeout: 10000,
    error: err
});
}


function callback(data, status)
{
  $that.siblings('.fullresponse').append(data);
}

function err(xhr, reason,ex)
{
  reason = '&lt;div class="error"&gt;' + reason + '&lt;/div&gt;';
  $that.siblings('.fullresponse').html(reason);
}

function test(){
for (var i=1;i<5;i++){
    myAjax(i);
}
}

var intervalID;

function loadPics()
{
  // function name not name()
  intervalID = setInterval(test, 3000);
}

function stopInterval()
{
  clearInterval(intervalID);
}
$("#stop").click(function(){
   stopInterval();
  return false;
});

loadPics();
</code>

</div>
<a href="#" id="stop">Stop Loading</a>
<div  class="msg" class="msg">
 </div>
<div class="fullresponse" style="width:98%"></div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

Two things are not so kosher in the above approach and you must have picked this up. First the initial time delay is not very user friendly and second having to stop the loading manually is not a good way of handling things. Perhaps a scrolling animation will be better. Digg and many other sites use such an approach where they limit the visible parts to a fixed number and removing the balance from the Dom. The life of a programmer is a life of giving attention to the details!  

The first problem can be solved easily, by loading the first Ajax call outside the setInterval().

The second problem will need a bit of juggling and modifications to our callback() function.

Let us first solve the first problem.

<div  class="code-block console-wrap">
<div class="code">

<code>
function myAjax(picNo){
$.ajax({
    type : "POST",
    url : "/CodeIgniter/Blogs/ajax_post/"+picNo,
    //data:{data:1},
    success: callback,
    timeout: 10000,
    error: err
});
}


function callback(data, status)
{
  $that.siblings('.fullresponse').append(data);
}

function err(xhr, reason,ex)
{
  reason = '&lt;div class="error"&gt;' + reason + '&lt;/div&gt;';
  $that.siblings('.fullresponse').html(reason);
}

function test(){
for (var i=1;i<4;i++){
    myAjax(i);
}
}

var intervalID;

function loadPics()
{
  // function name not name()
  intervalID = setInterval(test, 2000);
}

function stopInterval()
{
  clearInterval(intervalID);
}

$("#stop2").click(function(){
   stopInterval();
   return false;
});
 test();
 loadPics();
</code>
</div>
<a href="#" id="stop2">Stop Loading</a>
<div  class="msg" class="msg">
 </div>
<div class="fullresponse" style="width:98%"></div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<script type="text/javascript">
$(document).ready(function(){
    alert(2);
});
</script>




