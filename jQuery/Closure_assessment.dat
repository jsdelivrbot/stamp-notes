<script type="text/javascript" src="http://localhost/codeigniter/js/rotate3Di-0.9/jquery-css-transform.js"></script>
<script type="text/javascript" src="http://localhost/codeigniter/js/rotate3Di-0.9/rotate3Di-0.9.js"></script>
      
<!--
 {{feature: <div class="rot-ex">... I remember the awe with which we looked at it when it performed its first production program, a computation of transversational movements of railway cariages -  <a href="http://www.cs.utexas.edu/users/EWD/ewd05xx/EWD568.PDF">E.W. Djikstra</a></div>
}}

{{feature-image:/egypt/amato-01/aa_151.jpg}}
{{credit-source: Allan Amato}}
{{credit: /codeigniter/blogs/gallery/amato-01/50}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->








      
<!--
{{feature: <div class="rot-ex">...Such fantasies, and others like them, would have to be examined and resolved, with little gain. (Galileo, 1638, p. 159) </div>
}}
{{feature-image: http://localhost/egypt/martin-schoeller/cindy_sheman_2000.jpg}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}
-->


<h2>Closure Assessment</h2>

I waited to write this article until after I was finished with most of the tutorials and articles on Closure that you can find in this website. I wanted to be as objective as possible and to have a good overview of what one can do and not do with the library and you will struggle to find what you can not do with it. My first impression like those of some other people was, that the library had a strong bias from Java and that it was probably mostly written by Java programmers. However, as I peeked through the library the python Google culture kept propping up.

Each and every Library - irrespective -  of the language it is written in has the style of its author and it shows. Google's style came out as a style in a Culture where code is disciplined and goes through code review and quality assurance. Since the library can be compacted or using Google's phraseology can be compiled this verbosity can be excused. This verbosity makes it difficult to work with it quickly without having to delve into the code a lot. The exposed API, is for seasoned programmers and lucks the <em>usability</em>, elements found in libraries such as jQuery, where you will write:

{{plain: $('.class').css(arguments)}}

and use only this method as an interface to both getting or setting css parameters. Not so in Google. To Google's defense a lot of OOP programming gurus have been preaching for years that you should always access properties via getters and setters and Google's engineers have been listening. However, irrespective of the discipline you impose behind a code's library in my opinion, a library's API has to be as simple as possible.


The same is true of all the Closure classes. Take for example Internationalization and localization of code. Whatever one needs is here and I can hardly thing of something you may need and not find it in Closure. However, I would have loved an API with one or two methods exposed and something of the like's of to set all common items one would need based on a user's locale:

{{plain: goog.locale(<i>optionsObject</i>) }}

and ... heretically in similar lines to jQuery, get an option setting by using the same API interface, using goog.locale with no arguments to return the full options object:

{{plain: goog.locale() }}

and to retrieve a settings option, one could dream of doing this.

{{plain: goog.locale(<i>location</i>) }}

But of course you can develop these abstractions  in-house or perhaps develop them and offer them to the open source community. Talking about the Open Source community, it i snot clear to me as to what Google intends to do with Closure, will they have a method for the community to offer suggestions and report bugs? Who will curate after the library, these are questions that one needs to ask.

Coming back on code style, one aspect of the code that stands out it is that is very readable. You can read it like  a book. You will not find any 'Ninja' type of code or Crockford's recursive [for..loops](/CodeIgniter/Blogs/tutorials/jQuery/For_loop_Crockford_way );


Some of the verbosity could have been minimized, if one used Prototype's style of object method creations, which I will summarize in a example below:

<div class="code-block console-wrap">
<div code-block code>
<code>
goog.string= function extend(obj,

   function append (){};
   function delete (){};
   function map (){}

   return {
     append : append,
     delete  : delete,
     map  : map,
}
);
</code>
</div>
<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>


What I like about this style, is that it provides at a glance a summary of all the methods available as public and leaves all the private methods unexposed. It also provides at the return option a nice summary of all the object properties, which is quite handy especially when documentation is rather sparse.

<h3>Effects</h3>
The effects Classes (under the folder __fx__), are powerful, you can use them to produce animations and you can queue these animations serially or in parallel. 


<h3>DOM API</h3>
My biggest gripe is the DOM API, consider the code below which is essentialy an html fragment, that we are injecting into the document.

<div class="code-block console-wrap">
<div code-block code>
<code>
function testCreateDom() {
  var el = goog.dom.$dom('div', {
        style: 'border: 1px solid black; width: 50%; background-color: #EEE;',
        onclick: "alert('woo')"
      },
      goog.dom.$dom('p', {style: 'font: normal 12px arial; color: red; '},
                    'Para 1'),
      goog.dom.$dom('p', {style: 'font: bold 18px garamond; color: blue; '},
                    'Para 2'),
      goog.dom.$dom('p', {style: 'font: normal 24px monospace; color: green'},
                    'Para 3 ',
                    goog.dom.$dom('a', {
                          name: 'link', href: 'http://bbc.co.uk'
                      },
                      'has a link'),
                    ', how cool is this?'));

</code>

</div>
<div class="console"></div>
<ol class="results"></ol> 
</div>


How cool is this? Not very cool I am afraid I would rather jQuery:

{{plain: $(<em>selector</em>).html(<em>html fragment</em>); }}

Works very well, can even get the fragment by Ajax

The lack of an appropriate API wrapper is understandable, as Google's in-house requirements must not be the same like a normal web shop. Once their widgets have been developed, how many different designs do they need. Given the simplicity of most of their pages almost none. 

Goog'd DOM methods include though some powerful routines amongst them I picked the __dom.annotate__ and build a highlighter out of it - which I am using by the way here first before releasing it into the wild. It took the best part of an afternoon to develop as well as write the article at the same time. The routines also come very handy when using the rest of the API. Where they seem like an overkill, I just switch onto jQuery.


Although the size of the library is huge (probably in the region of 60,000-100,000 lines) on average I found out that I was loading about 30 files of an average of 500 lines that is 15,000 lines of code, if you multiply this by a factor of 0,3 to exclude the comments, you will be working on average with about 5,000 lines, which is comparable to both Prototype as well as jQuery (without counting their respective UI libraries). My guess is that on average Closure, compiled will provide you with __less__ of a JavaScript overhead than the other two and hence the advantage of speeding up your page's performance. Having said that though, note that your own code will be more verbose and you will be using more lines of code than if you have been using jQuery.

My own conclusions is that I will be using the library progressively, especially on larger web applications, but I will be avoiding using its DOM features until the API improves. It is unfair to both jQuery and Closure to compare them as each serves a different function, but jQuery's laconic syntax and easy to remember API is way ahead and simple enough for maintenance. jQuery's  'plugins' arsenal is also strong. 

The two libraries or more if you wish can happily co-exist together and you can check this out on each and every tutorial on Closure that you can find here. If you need i18n, Unicode support, structs and complicated graphics and you need all these to play nicely together, Google's Closure is as comprehensive as it gets. 

As a last word the only thing remaining to be said is for the web development community to thank Google for such a gift. The first time I downloaded the code, I was like a kid that was given a Christmas gift. Closure has a little bit of everything and it shows.







<div class="code-block console-wrap">
<div code-block code>
<code>
test
</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>




<span id="chapter" class="hidden">11</span>
##Further Reading





  
  







                                                                                                                                                                                        