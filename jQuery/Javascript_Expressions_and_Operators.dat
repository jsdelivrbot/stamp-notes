<h2>Chapter 5,  Expressions and Operators</h2>

<h3>Expressions</h3>

An expression is a phrase of JavaScript that a Javascript interpreter can evaluate to produce a value. The simplest expressions are literals or variable names like these:

\begin{codeblock}
var a=2, b=5;
log ('a+b = ', a+b);
\end{codeblock}


<h3>Operator Precedence</h3>

Operator precedence controls the order in which operations are performed.
Consider the following expression:

\begin{codeblock}
var x=2, y=3, z=2;
var w= x +y*z;
var w1=(x+y)*z;
log('w = ',w);
log('w1=',w1);
\end{codeblock}

<h3>Equality Operators</h3>

\begin{codeblock}
var a = "Text", b="Text";
if (a =="Text") alert('True');
<span class="green">// Using the (=) will accidentally assign the value rather than compare! </span>
if ( b = "Number") alert(' True ' + b);
\end{codeblock}

<h3>String Operators</h3>

The + operator is a special one. It gives priority to string operands over numeric operands. If one operand is a number ad=nd the other is a string they will both be converted to strings.

\begin{codeblock}
var a = "3", b="3";
var c = a + b;
var d = (1 + 1 + a);
alert(c);
alert(d);
\end{codeblock}

A final note that when the operator + is used with strings and numbers it may not be associative. The result may depend on the order in which the operations are performed. See the example above. The + operator works from left to right, unless parentheses change the order.

For logical operators Javascript will attempt to change a string to a number first!

<div  class="code-block console-wrap">
<div class="code code-block">
<code>
var a = "3", b=1;
if (b<=a) alert ("true");
b="1";
if (b<=a) alert ("true");
</code>
</div>
<p class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results" style="margin-top:8px"></ol> 
</div>



##Use + to convert anything to a number

The _+_ operator can be used to convert _anything_ to a number! This is more like a hidden feature in JavaScript.
<div  class="code-block console-wrap"><div class="code code-block"><code>
// Quick hex to dec conversion:
+"0xFF";              // -> 255

// Get a timestamp for now, the equivalent of `new Date().getTime()`:
+new Date();

// Safer parsing than parseFloat()/parseInt()
parseInt("1,000");    // -> 1, not 1000
+"1,000";             // -> NaN, much better for testing user input
parseInt("010");      // -> 8, because of the octal literal prefix
+"010";               // -> 10, `Number()` doesn't parse octal literals 

// A use case for this would be rare, but still useful in cases
// for shortening something like if (someVar === null) someVar = 0;
+null;                // -> 0;

// Boolean to integer
+true;                // -> 1;
+false;               // -> 0;

// Other useful tidbits:
+"1e10";              // -> 10000000000
+"1e-4";              // -> 0.0001
+"-12";               // -> -12

assert(+true==1,'+true==1');
</code>
</div>
<p class="msg" style="width:400px;font-size:24px;font-weight:bold;background:#fff">
</p>
<button class="eval">Run Code!</button>
<ol class="results" style="margin-top:8px"></ol> 
</div>


  
  







                