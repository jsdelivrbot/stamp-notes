 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->




<h2>Execution of functions </h2>

<div   style="background:url(http://localhost/codeigniter/images/board.jpg) no-repeat;width:98%;padding:0;margin:0;margin-left:0;margin-top:0;padding-top:0;padding-left:0;height:1000px">

<p style="font-family: 'Lucida Handwriting Italic';font-size:18px;font-weight:bold;color:#fff;padding:70px;white-space:pre">
 Now check this one out, By just enclosing
 the functions in parentheses we get a 
JavaScript equivalent to the above. 


(function fn(){
    log('I am in function fn ','');
})();
function getID(elem) {
   var id = elem.id;
   alert("element's id set to \"" + id + "\"."); 
} 

(function (x){
        foo =  x + 22; 
 })(10);

(function (x){
        bar =  x + 22; 
        window.$ = 100;
 })();

alert(window.$);

// jQuery now screwed, this will not
// work

log('foo',  foo);
log('bar',  bar);
</p>


</div>

Now check this one out, By just enclosing the functions in parentheses we get a JavaScript equivalent to the above. 

<div  class="code-block console-wrap">
<img src="http://localhost/codeigniter/images/wave.gif" style="width:160px" id= "wave" onclick="getID(this);"  />
<div class="code-block code">
<code>

(function fn(){
    log('I am in function fn ','');
})();
function getID(elem) {
   var id = elem.id;
   alert("This element's id attribute is set to \"" + id + "\"."); 
} 
</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

What the () does it tells Javascript to execute the function just before it. Let u s now assign the above function to a variable:

<div  class="code-block console-wrap">
<div class="code-block code">
<code>

var foo = (function (){
                       log('I am in function foo ','');
                       return 22; 
                    })();

log('foo', foo);
</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

Now our example before the last:

<div  class="code-block console-wrap">
<div class="code-block code">
<code>

var foo = (function (x){
                       log('I am in function foo ','');
                       return x + 22; 
                    })(10);

log('foo', foo);
</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

But do we need the var foo?

<div  class="code-block console-wrap">
<div class="code-block code">
<code>

(function (x){
        foo =  x + 22; 
 })(10);

(function (x){
        bar =  x + 22; 
        window.$ = 100;
 })();




alert(window.$);

log('foo',  foo);
log('bar',  bar);



</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

At this point you should open the jQuery Library and have a peek at the code there, it starts as 

(function(){
... about 3 500 lines of code
})();

If you have managed to work through the above code you must by now realize that everything within the jQuery library protects the outside world! This avoid name pollution and elminates errors in coding.










<span id="chapter" class="hidden">11</span>
##Further Reading


<script>
function getID(elem) {
   var id = elem.id;
   alert("This element's id attribute is set to \"" + id + "\"."); 
} 

window.defaultStatus = "Click on a link on the left to navigate this website."
</script>
 



  
  







