<style type="text/css">

.sales1{color:red}
ul.ex {font-size:13px;display:block}
ul.ex {list-type:none;list-style-type:none}
ul.ex li, ul.ex1 li{display:block;width:90%;border:1px solid #ececec;margin-bottom:1px}
ul.ex li span{cursor:pointer}
</style>



<h3>Ajax, loading scripts dynamically</h3>

<p>
When we do not want to retrieve all the JavaScript we need when the page is first
loaded.

Pulling a script is similar to loading an HTML fragment. In this case we use the global function $.getScript(), which, like its siblings accepts a URL locating the script file and an optional callback function.
</p>

We will load and execute the script shown below, when you click on the 'load data' button. You can edit the code if you wish.

{{plain:
// contents of a.js
var a=100;
alert('Loaded via Ajax value of a = '+a);
}}

<h3>Executing a script using $.getScript()</h3>


\begin{codeblock}
$('#ajax-button').click(function(){
     $.<span class="highlight">getScript</span>('/application-latest/js/underscore.js');
     return false;
});
\end{codeblock}


Scripts fetched in this way are run in the global context of the current page. This means they have access to all globally-defined functions and variables, notably including jQuery itself. We can therefore mimic the JSON example to prepare and insert HTML on the page when the script is executed, and place this code in c.js:


When testing this example, the image will probably appear instantaneously when the button is clicked. This is a hazard of working on our applications locally; it is hard to account for delays in transferring documents
across the network. 

<h3>Adding a callback function</h3>
Since the JavaScript will be loaded asynchronously we can use a callback to 
process the data once the script is loaded. In the example below, I have just used an alert.

<div  class="code-block console-wrap">
<div class="code">

<code>
$('#ajax-button-01').click(function(){
     $.getScript('/CodeIgniter/js/a.js', function(){
       alert('script loaded and executed');});
     return false;
});

</code>

</div>


<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-01">Load Data!</button>

<ol class="results"></ol> 
</div>

<hr/>


In the last listing we will add 100 to the value of var a, in order to verify that
the script has been loaded. At this stage we will not concern ourselves with any error trapping.



<div  class="code-block console-wrap">
<div class="code">
<code>
$('#ajax-button-02').click(function(){
     $.getScript('/CodeIgniter/js/a.js', function(){
       a = a +100;
      alert('script loaded and executed value of a '+a);
        });
     return false;
});
</code>
</div>
<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-02">Load Data!</button>
<ol class="results"></ol> 
</div>

<h3>Loading a Cookie plugin</h3>

<div  class="code-block console-wrap">
<div class="code">
<code>
$('#ajax-button-03').click(function(){
     $.getScript('/CodeIgniter/js/cookies.js', function(){
           $.cookie('the_cookie', 'the_value');
           var z = $.cookie('the_cookie');
            alert('script loaded and executed value of  ' + z);
        });
     return false;
});
</code>
</div>
<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-03">Load Data!</button>
<ol class="results"></ol> 
</div>










