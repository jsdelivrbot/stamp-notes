 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->

<style type="text/css">
button#cbutton{color:blue}
div#ex1{};

</style>


<h2>Syntactic Sugar</h2>
Javascript kept giving me surprises when I was still finding my way through it. You can actually define anonymous functions as the elements of an array.

The next example declares array <dfn>aFunctionArray</dfn> as an array of three functions:

<div  class="code-block console-wrap">
<div class="code-block code">
<code>
var aFunctionArray = [
   function(x) {
        return x;
   },
  function(x) {
        return x*x;
   },
  function(x){
      return x*x*x;
  }
];
var z=aFunctionArray[1](3);
alert(z);
</code>
</div>

<div  class="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

It can be quite useful, if you want to run a variable against a number of functions.

<div  class="code-block console-wrap">
<div class="code-block code">
<code>
var x = 10;
var aFunctionArray = [
   function(x) {
        return x;
   },
  function(x) {
        return x*x;
   },
  function(x){
      return x*x*x;
  }
];

var z = '';
for (var i = 0; i &lt; aFunctionArray.length; i++){

   z  += ' '+ aFunctionArray[i](x);
}

alert (z);
</code>
</div>

<div  class="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

<h3>Example Usage</h3>
An example usage is from Prototype's library. The Try
<div  class="code-block console-wrap">
<div class="code-block code">
<code>
function c() {
  return 12
};
var a, b;

var aTry = {
  these: function () {
    var returnValue;
    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch(e) {}
    }
    return returnValue;
  }
};
var z = aTry.these(a, b, c);

var initXMLHttp = {
  getTransport: function () {
    return Try.these(
    function () {
      return new XMLHttpRequest()
    },
    function () {
      return new ActiveXObject('Msxml2.XMLHTTP')
    },
    function () {
      return new ActiveXObject('Microsoft.XMLHTTP')
    }) || false;
  }
}

var z1 = initXMLHttp.getTransport();
log(z);
log(z1);
</code>
</div>

<div  class="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>
<hr />


var Ajax = {
      objectType:'',
  getTransport: function() {
    return Try.these(
      function() {return new XMLHttpRequest()},
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')}
    ) || false;
  },

  activeRequestCount: 0
};







##Further Reading

[Good discussion at Yahoo Developer](http://developer.yahoo.com/ypatterns/parent.php?pattern=transition)





