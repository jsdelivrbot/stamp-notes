\section{Higher Order Functions}

Functions that operate on other functions, either by taking them as arguments or returning them, are called _higher-order_ functions. For JavaScript programmers used to the fact that functions are regular values, there is nothing particularly remarkable about the fact that such functions exist. The term comes from mathematics, where the distinction between functions and other values is taken a little more seriously.

Higher-order functions allow us to abstract over actions, not just values. They come in several forms. For example, you can have functions that create new functions:

\begin{codeblock}
function greaterThan(n) {
  return function(m) { return m > n; };
}
var greaterThan10 = greaterThan(10);
    assert(greaterThan10(11), '11 is greater than 10');
\end{codeblock}

Or functions that change other functions:

\begin{codeblock}
function noisy(f) {
  return function(arg) {
    console.log("calling with", arg);
    var val = f(arg);
    console.log("called with", arg, "- got", val);
    return val;
  };
}
noisy(Boolean)(0);
\end{codeblock}

// → calling with 0
// → called with 0 - got false
Or functions that implement custom types of control flow:

\begin{codeblock}
function unless(test, then) {
  if (!test) then();
}
function repeat(times, body) {
  for (var i = 0; i < times; i++) body(i);
}

repeat(3, function(n) {
  unless(n % 2, function() {
    console.log(n, "is even");
  });
});
\end{codeblock}

// → 0 is even
// → 2 is even

\begin{codeblock}
// Functions as values of a variable
var cube = function (x) {
  return Math.pow(x, 3);
};
var cuberoot = function (x) {
  return Math.pow(x, 1 / 3);
};
 
// Higher order function
var compose = function (f, g) {
  return function (x) {
    return f(g(x));
  };
};
 
// Storing functions in a array
var fun = [Math.sin, Math.cos, cube];
var inv = [Math.asin, Math.acos, cuberoot];
 
for (var i = 0; i < 3; i++) {
  // Applying the composition to 0.5
    log(compose(inv[i], fun[i])(0.5));
}

\end{codeblock}

The lexical scoping rules that we discussed in Chapter 3 work to our advantage when using functions in this way. In the example above, the n variable is a parameter to the outer function. Because the inner function lives inside the environment of the outer one, it can use n. The bodies of such inner functions can access the variables around them, and play a role similar to the {} blocks used in regular loops and conditional statements. An important difference is that variables declared inside inner functions do not end up in the environment of the outer function. And that is usually a good thing.

Passing along arguments

The noisy function above, which wraps its argument in another function, has a rather serious deficit.

function noisy(f) {
  return function(arg) {
    console.log("calling with", arg);
    var val = f(arg);
    console.log("called with", arg, "- got", val);
    return val;
  };
}
If f takes more than one parameter, only the first one is passed through to it. We could add a bunch of arguments to the inner function (arg1, arg2, and so on) and pass all of them to f, but it is unclear how many would be necessary, since different fs might take different numbers of arguments. This solution would also deprive f of the information in arguments.length. Since we’d always pass the same number of arguments, it wouldn’t know how many argument were originally given.

For these kinds of situations, JavaScript functions have an apply method. The apply method gets passed an array (or array-like object) of arguments, and will call the function with those arguments.

function transparentWrapping(f) {
  return function() {
    return f.apply(null, arguments);
  };
}
That’s a particularly useless function, but it shows the pattern we are interested in—the resulting function will pass all of the given arguments, and only those arguments, to f. It does this by passing its own arguments object to apply. The first argument to apply, for which we are passing null here, can be used to simulate a method call. More on that in the next chapter.