
## String.prototype toUpperCase() and toLowerCase() methods 

String.prototype.toLowerCase ( )

If this object is not already a string, it is converted to a string. The characters in that string are converted one by one to lower case. The result is a string value, not a String object.

The characters are converted one by one. The result of each conversion is the original character,
unless that character has a Unicode lowercase equivalent, in which case the lowercase equivalent is
used instead.

NOTE 1

The result should be derived according to the case mappings in the Unicode character database (this explicitly includes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that accompanies it in Unicode 2.1.8 and later).

NOTE 2

The toLowerCase function is intentionally generic; it does not require that its this value be a
String object. Therefore, it can be transferred to other kinds of objects for use as a method.



When comparing two strings, normally convert the the strings to all uppercase or all lowercase characters. 

You can convert the string to either upper-case or lower-case , using

{{plain:
.toUpperCase();
.toLowerCase();
}}

We can then use the JavaScript equality
operator (==) to make the comparison. Javascript always attempts to convert the type of strings before a comparison. The strict operator (===), will compare including the type. Consider the following:

\begin{codeblock}
var s,s1;
       s = "washington";
       s2="Washington";
       s3=new String("washington");
      assert(s==s2,'strings are not equal');
assert(s.toUpperCase()==s2.toUpperCase(),'strings are equal');
assert(s===s3,'strings are not equal');
assert(s==s3,'strings are equal');
\end{codeblock}

These two variables might contain the same series of characters but are different data types. The first is a <strong>string value</strong>,
while the second is an instance of a <strong>String object</strong>. If you place these two values on either side of an equality (= =)
operator, JavaScript tries various evaluations of the values to see if there is a coincidence somewhere. In this case,
the two variable values would show to be equal, and the following expression:

{{plain:
stringA = = stringB
}}

returns true.

In most cases using the equality operator will suffice.

##Further Reading




  
  







