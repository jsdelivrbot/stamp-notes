
<script>
goog.require('goog.array');
goog.require('goog.events');
goog.require('goog.Timer');
goog.require('goog.debug.Logger');
goog.require('goog.debug.errorHandlerWeakDep');
goog.require('goog.events.EventTarget');
goog.require('goog.json');
goog.require('goog.net.ErrorCode');
goog.require('goog.net.EventType');
goog.require('goog.net.XmlHttp');
goog.require('goog.net.xhrMonitor');
goog.require('goog.structs');
goog.require('goog.structs.Map');
goog.require('goog.net');
</script>

<h2>Classes with Closure</h2>
In this tutorial we will create a more visual example and will intermingle, jQuery with closure.

<h3>Step 1: Constructor Function</h3>

The Constructor function will construct the basic class and will set some
basic parameters  and methods.

\begin{codeblock}
goog.provide('example.House');
  example.House = function (name, el, numberOfBoxes) {
  this.name_ = name;
  if (goog.isDef(numberOfBoxes)) {
    this.numberOfBoxes_ = numberOfBoxes;
  }

  this.itemsInTheBox = goog.isDef(itemsInTheBox) ? itemsInTheBox : [];
};
\end{codeblock}



<h3>Step 2: Add Methods and properties</h3>

Like in other class-based programming models, the _constructor function_ sets up the
initial state of the class. It takes the parameter's address, numberOfBathrooms, and
itemsInTheGarage and assigns them to fields of the class. Each assignment applies only to the newly created instance of the class

\begin{codeblock}
/**
* @type {number}
* @private
*/

example.House.prototype.numberOfBathrooms_ = 1;
/**
* @type {boolean}
* @private
*/

example.House.prototype.needsPaintJob_ = false;
/** @return {string} */
example.House.prototype.getAddress = function () {
  return this.address_;
};
                    
/** @return {number} */
example.House.prototype.getNumberOfBathrooms = function() {
return this.numberOfBathrooms_;
};
/** @return {boolean} */
example.House.prototype.isNeedsPaintJob = function() {
return this.needsPaintJob_;
};
/** @param {boolean} needsPaintJob */
example.House.prototype.setNeedsPaintJob = function(needsPaintJob) {
this.needsPaintJob_ = needsPaintJob;
};
/** @param {string} color */
example.House.prototype.paint = function(color) {
/* some implementation */
};
/** @return {number} */
example.House.prototype.getNumberOfItemsInTheGarage = function() {
return this.itemsInTheGarage.length;
};
\end{codeblock}


<h3>Step 3: Creating an instance of the Class</h3>

An instance of the Class, is created using the _new_ keyword. We can the get the
properties and access methods.

\begin{codeblock}
var whiteHouse = new example.House('1600 Pennsylvania Avenue', 35);
whiteHouse.setNeedsPaintJob(true);
whiteHouse.name = function () {
  return 'White House';
};

log(whiteHouse.getAddress());
log(whiteHouse.name());
\end{codeblock}



<span id="chapter" class="hidden">11</span>
##Further Reading





  
  







                                                                                                        