 <!--
{{feature: .. A discussion of bubble sort with warnings that the performance
is bad and the code isn't simple (arguably) is like
telling someone "don't think about pink elephants. <a href="http://www.cs.duke.edu/~ola/papers/bubble.pdf">Owen Astrachan</a> }}
{{feature-image: http://localhost/egypt/elliott-erwitt/EE-1150.jpg}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->

<h2>Heap Sort Part II - Visual Implementation</h2>
Heapsort (method) is a comparison-based sorting algorithm, and is part of the selection sort family. Although somewhat slower in practice on most machines than a good implementation of quicksort, it has the advantage of a worst-case &Theta;(n log n) runtime. Heapsort is an in-place algorithm, but is not a stable sort.

<div  class="code-block console-wrap">
<div class="code code-block">
<code>
var nComparisons = 0,  nAssignments = 0; // for statistics
 
function decimalPlaces(x, n)
 { var scale = 1;
   for(var i = 0; i < n; i++) scale *= 10;
   return Math.round(x*scale) / scale;
 }

 
function showStats(N) { 
var nLogN = N > 0 ? (N*Math.log(N)/Math.log(2)) : 0;
   document.sortForm.stats.value =
    nAssignments + ' Assignments ' +
    (nLogN > 0 ? // l allison comp sci monash uni
     ('= (N log2(N)) * ' + decimalPlaces(nAssignments/nLogN, 3)) : '') + '\n'+
    nComparisons + ' Comparisons ' +
    (nLogN > 0 ? // l allison comp sci monash uni
     ('= (N log2(N)) * ' + decimalPlaces(nComparisons/nLogN, 3)) : '');
 }
 
 
function downHeap(a, k, N,  NN){
// pre:  a[k+1..N] is a heap
// post: a[k..N] is a heap
  var newElt, child;         var k1=k;
 
   newElt = a[k];
   while(k <= Math.floor(N/2))
    { var child = 2*k;
      if( child < N )
       { nComparisons++; // statistics
         if( a[child] < a[child+1] ) // choose the larger child
            child++;
       }
      nComparisons++;
      if( newElt >= a[child] ) break;  // parent at least big as children
      a[k] = a[child]; nAssignments++; // move child up
      k = child;
    }
   a[k] = newElt; nAssignments++;
 
 
   var i; // trace progress, not part of the algorithm as such
   var line = '';
   for(i=1; i <= NN; i++)
    { if(i==k1) line += '[';
      line += a[i];
      if(i==N) line += ']';
      line += ' ';
    }
   document.sortForm.trace.value += line + '\n';
 }//downHeap
 
 
function heapsort(a, N)
// sort a[1..N],  N.B. 1 to N
 { var i;
   for(i=Math.floor(N/2); i >= 1; i--) // make heap
      downHeap(a, i, N,  N);
 
   document.sortForm.trace.value += '\n';
 
   for(i=N; i >= 2; i--) // repeatedly remove largest element, i.e. a[1]
    { var temp = a[i];
      a[i]=a[1];         // move largest of a[1..i], i.e. a[1], to a[i]
      a[1]=temp;
      nAssignments += 3; // for the swap
 
      downHeap(a, 1, i-1,  N); // restore Heap property
    }
 }//heapsort
 
 
function sortDr(){ 
  var inStr = document.sortForm.inp.value;
   var a = new Array(); var n = 0;
   document.sortForm.opt.value = '';
   document.sortForm.trace.value = '';
   document.sortForm.stats.value = '';
    var i = 0;
   while(i < inStr.length)
    { while( i < inStr.length && inStr.charAt(i) == ' ' ) i++;
      if(i < inStr.length)
       { var j=i;
         while(j < inStr.length && inStr.charAt(j) != ' ') j++;
         n++; a[n] = new Number(inStr.substring(i,j))-0;
         i = j;
       }
    }
 
   nAssignments = 0; 
   nComparisons = 0;  
 
   heapsort(a, n);  // sort the array `a'
 
   for(i=1; i <=n; i++) // show the results
      document.sortForm.opt.value += a[i]+' ';
   showStats(n);
 }//sortDr


</code>
</div>
<div class="sandbox-console curvy">

<FORM NAME="sortForm">
 
input:&nbsp;&nbsp;<INPUT TYPE="text" NAME="inp" SIZE=50 VALUE="6 2 3 1 5 4"> 
<INPUT TYPE="button" VALUE="go" ONCLICK="sortDr();"><BR> 
output:<INPUT TYPE="text" NAME="opt" SIZE=50><BR> 
trace:&nbsp;&nbsp;<TEXTAREA ROWS=10 COLS=50 NAME="trace"></TEXTAREA><BR> 
stat's:&nbsp;<TEXTAREA ROWS=2  COLS=50 NAME="stats"></TEXTAREA><BR> 
</FORM><BR CLEAR="all"> 
</div>

<div  id="msg" class="msg" >
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

The heap sort works as its name suggests. It begins by building a heap out of the data set, and then removing the largest item and placing it at the end of the sorted array. After removing the largest item, it reconstructs the heap, removes the largest remaining item, and places it in the next open position from the end of the sorted array. This is repeated until there are no items left in the heap and the sorted array is full. Elementary implementations require two arrays - one to hold the heap and the other to hold the sorted elements. [2]

Heapsort inserts the input list elements into a heap data structure. The largest value (in a max-heap) or the smallest value (in a min-heap) are extracted until none remain, the values having been extracted in sorted order. The heap's invariant is preserved after each extraction, so the only cost is that of extraction.

During extraction, the only space required is that needed to store the heap. In order to achieve constant space overhead, the heap is stored in the part of the input array that has not yet been sorted. (The structure of this heap is described at Binary heap: Heap implementation.)
Heapsort uses two heap operations: insertion and root deletion. Each extraction places an element in the last empty location of the array. The remaining prefix of the array stores the unsorted elements.

<h3>Comparison with other sorts</h3>

Heapsort primarily competes with quicksort, another very efficient general purpose nearly-in-place comparison-based sort algorithm.

Quicksort is typically somewhat faster, due to better cache behavior and other factors, but the worst-case running time for quicksort is O(n2), which is unacceptable for large data sets and can be deliberately triggered given enough knowledge of the implementation, creating a security risk. See quicksort for a detailed discussion of this problem, and possible solutions.
Thus, because of the O(n log n) upper bound on heapsort's running time and constant upper bound on its auxiliary storage, embedded systems with real-time constraints or systems concerned with security often use heapsort.

Heapsort also competes with merge sort, which has the same time bounds, but requires Ã�ï¿½Ã¯Â¿Â½Ã�Â¯Ã�Â¿Ã�Â½Ã�ï¿½Ã¯Â¿Â½Ã�ï¿½Ã�Â©(n) auxiliary space, whereas heapsort requires only a constant amount. Heapsort also typically runs more quickly in practice on machines with small or slow data caches. On the other hand, merge sort has several advantages over heapsort:

Like quicksort, merge sort on arrays has considerably better data cache performance, often outperforming heapsort on a modern desktop PC, because it accesses the elements in order.

- Merge sort is a stable sort.
- Merge sort parallelizes better; the most trivial way of parallelizing merge sort achieves close to linear speedup, while there is no obvious way to parallelize heapsort at all.
Merge sort can be easily adapted to operate on linked lists (with Ã�ï¿½Ã¯Â¿Â½Ã�Â¯Ã�Â¿Ã�Â½Ã�ï¿½Ã�Â¯Ã�ï¿½Ã�Â¿Ã�ï¿½Ã�Â½(1) extra space[7]) and very large lists stored on slow-to-access media such as disk storage or network attached storage. Heapsort relies strongly on random access, and its poor locality of reference makes it very slow on media with long access times.

An interesting alternative to Heapsort is Introsort which combines quicksort and heapsort to retain advantages of both: worst case speed of heapsort and average speed of quicksort.


In any case in  practical situations the best sort to use is the
one provided by the standard (e.g., Python, Java, C, or C++)
libraries. However, we study sorts because general sorts
do not work in all situations and because sorting is a
simple illustration of algorithmic techniques. JavaScript provides a built-in method for sorting arrays and you can find more about it in ['Sorting Arrays in Javascript'](http://127.0.0.1/CodeIgniter/index.php/Blogs/tutorials/jQuery/Array_sort).


<h3>Related</h3>

[Google's Closure Heap Class](http://127.0.0.1/CodeIgniter/index.php/Blogs/tutorials/jQuery/heap)
 



  
  







                                                                                  