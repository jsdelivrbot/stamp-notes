 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}
{{feature-image: http://localhost/egypt/elliott-erwitt/EE-1150.jpg}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<style type="text/css">
.myForm{margin:15px;
padding:15px;
border:1px solid #bebebe;
}

</style>


<h2>Event Handling Part IV</h2>

<h3>Event Creation</h3>
The last DOM 2 Event topic we are going to discuss - which is not implemented in all browsers, is __event creation__.

The DOm 2 Event specification allows for synthetic events to be created by the user using __document.createEvent()__. You first cretae the type of event you want, say an HTML - related event.

{{plain: document.createEvent('HTMLEvents') }}

Once the event is created you pass it various attributes related to the event type. Here, for example, we pass the type of event "click" and Boolean values it is bubble-able and cancelable:

{{plain: evt.initEvent('click', 'true', 'true') }}

Finally, we find a node in the document tree and dispatch an event to it:

{{plain: currentNode.dispatchEvent(evt) }}

The event is then is triggered and reacts as any other event.

The following example shows DOM 2 event creation in action and allows you to move around the tree and fire clicks at various locations. The __addEventListener()__ and __removeEventListener()__ are added in the example so you do not have to observe click events until you are ready.


<div  class="code-block console-wrap"><div class="code code-block">
<code>
function showMouseDetails(e){
  document.mouseform.clientx.value = event.clientX;
  document.mouseform.clienty.value = event.clientY;
 showStatus(e.target.nodeName);
}

function makeEvent()
{
  evt= document.createEvent('HTMLEvents');
  evt.initEvent('click', 'true', 'true');
  currentNode.dispatchEvent(evt);
}

function startListen(){
   document.addEventListener('mouseover', showMouseDetails, true);
}

function stopListen(){
  document.removeElementListener('click',showMouseDetails, true);
}

function showStatus(msg){
  document.myForm.statusField.value=msg;
}



var currentNode=document.body;
document.myForm.statusField.value=currentNode.nodeName;
startListen();

</code>

</div>
<form class="myForm" id="mouseform" name="mouseform" action="#" method="get" >
Browser Coordinates of click:
<input id="clientx" type="text" />
<input id="clienty" type="text" />
</form>

<form id="myForm" class="myForm ui-curv-all" method="get" id="myForm" name="myForm" >
Current Node: <input type="text" name="statusField" value="" />
  
</form>




</form>
<div  class="msg" class="msg" style="white-space:pre;font-family:monospace;line-height:1.3">
</div>
<div class="console"> </div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

Notice in the example how the handler accepts an argument. DOM2 browsers pass an __Event__ object containing information about the event handlers. The name of the argument is arbritrary, but _event_, _e_ and _evt_ are commonly used. We will discuss the _Event_ object in more detail below.

<h3>Event Handler Scope</h3>

<h3>The addEventListener() method</h3>

The preferred way of binding handlers to DOm objects is to use the __addEventListenerMethod()__.

In the example below, we will change the color of text on hover. We will also log the properties of the Event object, which we are passing onto the handler.


<div  class="code-block console-wrap"><div class="code code-block">
<code>
var thisText = document.getElementById('myText');

function changeColor(e) {
  e.target.style.color = '#dd0000';
};

function showProperties(e) {
  for (var prop in e) {
    log(prop, e[prop]);
  }
};

thisText.addEventListener('mouseover', changeColor, true);
thisText.addEventListener('click', showProperties, true);
</code>


</div>
<div id="myText"  style="white-space:pre;font-family:monospace;line-height:1.3">myText - mouse over me!
</div>
<div  class="msg" style="white-space:pre;font-family:monospace;line-height:1.3">
</div>
<div class="console"> </div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>




##Further Reading


  







