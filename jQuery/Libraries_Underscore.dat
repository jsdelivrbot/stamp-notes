 <!--
{{feature: .. The take home message: seek the signal, avoid the noise, and do your own homework .. zerohedge.com}}
{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: UI, jQuery, Visibility Filters, CSS Visibility }}
{{snippet:using CodeIgniter's file_helper class}}

-->

<style type="text/css">

.sales1{color:red}
ul.ex {font-size:13px;display:block}
ul.ex {list-type:none;list-style-type:none}
ul.ex li, ul.ex1 li{display:block;width:90%;border:1px solid #ececec;margin-bottom:1px}
ul.ex li span{cursor:pointer}
</style>



<h3>Libraries - Prototype emulation</h3>

Prototype is a great library, especially its language extensions. However, almost unanimously the JavaScript community is set against extending the build-in objects like String and Array. This is based on the presumption that someone else might have already changed the base object and you are messing with it. I don't buy fully into this, but one can actually extend the objects as you like. The [underscore JavaScript library](http://documentcloud.github.com/underscore/) defines an object (the underscore) to lump all these routines into one single object. If you object to the underscore you can easily alias it into another variable name (I normally use U or X for utilities). Using $X would be closer to Prototypes name-spacing (as the library have $A, $R etc..). Almost as directive in old Pascal and C programs!

<h3>Executing a script using $.getScript()</h3>


<div  class="code-block console-wrap">
<div class="code code-block">
<code>
$('#ajax-button').click(function(){
     $.<span class="highlight">getScript</span>('/CodeIgniter/js/underscore.js');
     return false;
});

</code>

</div>

<div  id="msg" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button">Load Data!</button>
<ol class="results"></ol> 
</div>

<hr/>

Scripts fetched in this way are run in the global context of the current page. This means they have access to all globally-defined functions and variables, notably including jQuery itself. We can therefore mimic the JSON example to prepare and insert HTML on the page when the script is executed, and place this code in c.js:


When testing this example, the image will probably appear instantaneously when the button is clicked. This is a hazard of working on our applications locally; it is hard to account for delays in transferring documents
across the network. 

<h3>Adding a callback function</h3>
Since the JavaScript will be loaded asynchronously we can use a callback to 
process the data once the script is loaded. In the example below, I have just used an alert.

<div  class="code-block console-wrap">
<div class="code">

<code>
$('#ajax-button-01').click(function(){
     $.getScript('/CodeIgniter/js/a.js', function(){
     var odds = _.reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
     log(odds);
     return false;
});

</code>

</div>


<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-01">Load Data!</button>

<ol class="results"></ol> 
</div>

<hr/>


In the last listing we will add 100 to the value of var a, in order to verify that
the script has been loaded. At this stage we will not concern ourselves with any error trapping.



<div  class="code-block console-wrap">
<div class="code">
<code>
$('#ajax-button-02').click(function(){
     $.getScript('/CodeIgniter/js/a.js', function(){
       a = a +100;
      alert('script loaded and executed value of a '+a);
        });
     return false;
});
</code>
</div>
<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-02">Load Data!</button>
<ol class="results"></ol> 
</div>

<h3>Loading a Cookie plugin</h3>

<div  class="code-block console-wrap">
<div class="code">
<code>
$('#ajax-button-03').click(function(){
     $.getScript('/CodeIgniter/js/cookies.js', function(){
           $.cookie('the_cookie', 'the_value');
           var z = $.cookie('the_cookie');
            alert('script loaded and executed value of  ' + z);
        });
     return false;
});
</code>
</div>
<div  id="msg5" class="msg">
 </div>
<div class="console"></div>
<hr/>
<button class="eval">Run Code!</button>
<button id="ajax-button-03">Load Data!</button>
<ol class="results"></ol> 
</div>










    