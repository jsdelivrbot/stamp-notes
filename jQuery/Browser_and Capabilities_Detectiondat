 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->




<h2>Browser and Capabilities Detection</h2>
Javascript's __navigator__ object provides properties that indicate the type of browser and other useful information about the user accessing the page. You can peek at the most common properties by examining the code below.

The following simple script shows the basic use of the __Navigator__ properties for browser detection. It simply prints some properties and lists the method and properties available in your browser. You will probably see a different output that what I see (I basically used Chrome when developing this page).

<div  class="code-block console-wrap">
<div class="code-block code">
<code>
var browserName = navigator.appName;
var browserVersion = parseFloat(navigator.appVersion);
var userAgent = navigator.userAgent;

log(browserName);
log(browserVersion);
log(userAgent);

$that.siblings('.msg').properties(navigator);

</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

There are a few problems with using browser detection this way. First you are making an assumption that the browser will correctly report itself. You may find that many obscure browsers report themselves as Internet Explorer. The biggest problem though is that the assumption that by knowing the type of browser is  enough to determine what action to take.

{{bulb:
Developers should not focus on detecting the browser brand but rather focus on detecting the capabilities of the browser in use.
}}

The important features that one should check (in terms of visual appearances) can be detected by jQuery's $.support();

<div  class="code-block console-wrap">
<div class="code-block code">
<code>

z = $.support;
for (var prop in z) {
  log('property: ', prop);
}

</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>


With the above code jQuery's team have summarized the properties that would normally result in serious differences mainly between IE and the rest of the browser world.

Prototype takes a similar approach to jQuery, detecting some basic information.
<div  class="code-block console-wrap">
<div class="code-block code">
<code>
/* Some browser detection features
    adapted from Prototype
*/
var browserDetect = {
  Browser: (function () {
    var ua = navigator.userAgent;
    var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]';
    return {
      IE: !!window.attachEvent && !isOpera,
      Opera: isOpera,
      WebKit: ua.indexOf('AppleWebKit/') > -1,
      Gecko: ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') === -1,
      MobileSafari: /Apple.*Mobile.*Safari/.test(ua)
    };
  })(),

  BrowserFeatures: {
    XPath: !!document.evaluate,
    SelectorsAPI: !!document.querySelector,
    ElementExtensions: (function () {
      var constructor = window.Element || window.HTMLElement;
      return !! (constructor && constructor.prototype);
    })(),
    SpecificElementExtensions: (function () {
      if (typeof window.HTMLDivElement !== 'undefined') return true;

      var div = document.createElement('div');
      var form = document.createElement('form');
      var isSupported = false;

      if (div['__proto__'] && (div['__proto__'] !== form['__proto__'])) {
        isSupported = true;
      }

      div = form = null;

      return isSupported;
    })()
  }
};

log(browserDetect.Browser.IE);
log(browserDetect.BrowserFeatures.SelectorsAPI);

log(browserDetect.BrowserFeatures.XPath);
</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>

Google's closure adopted a different path, with long files of detection, under useragent package.

<h3>JavaScript Capabilities Detection</h3>

<div  class="code-block console-wrap">
<div class="code-block code">
<code>

goog = {};
goog.string = {};

goog.string.trim = function (str) {
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, '');
};

/**
 * Compares two version numbers.
 *
 * @param {string|number} version1 Version of first item.
 * @param {string|number} version2 Version of second item.
 *
 * @return {number}  1 if {@code version1} is higher.
 *                   0 if arguments are equal.
 *                  -1 if {@code version2} is higher.
 */
goog.string.compareVersions = function (version1, version2) {
  var order = 0;
  // Trim leading and trailing whitespace and split the versions into
  // subversions.
  var v1Subs = goog.string.trim(String(version1)).split('.');
  var v2Subs = goog.string.trim(String(version2)).split('.');
  var subCount = Math.max(v1Subs.length, v2Subs.length);

  // Iterate over the subversions, as long as they appear to be equivalent.
  for (var subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {
    var v1Sub = v1Subs[subIdx] || '';
    var v2Sub = v2Subs[subIdx] || '';

    // Split the subversions into pairs of numbers and qualifiers (like 'b').
    // Two different RegExp objects are needed because they are both using
    // the 'g' flag.
    var v1CompParser = new RegExp('(\\d*)(\\D*)', 'g');
    var v2CompParser = new RegExp('(\\d*)(\\D*)', 'g');
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ['', '', ''];
      var v2Comp = v2CompParser.exec(v2Sub) || ['', '', ''];
      // Break if there are no more matches.
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }

      // Parse the numeric part of the subversion. A missing number is
      // equivalent to 0.
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);

      // Compare the subversion components. The number has the highest
      // precedence. Next, if the numbers are equal, a subversion without any
      // qualifier is always higher than a subversion with any qualifier. Next,
      // the qualifiers are compared as strings.
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
      // Stop as soon as an inequality is discovered.
    } while (order == 0);
  }

  return order;
};

/**
 * Compares elements of a version number.
 *
 * @param {string|number|boolean} left An element from a version number.
 * @param {string|number|boolean} right An element from a version number.
 *
 * @return {number}  1 if {@code left} is higher.
 *                   0 if arguments are equal.
 *                  -1 if {@code right} is higher.
 * @private
 */

goog.string.compareElements_ = function (left, right) {
  if (left < right) {
    return -1;
  } else if (left > right) {
    return 1;
  }
  return 0;
};

log(goog.string.compareVersions('version 1.01.01', 'version 1.01.01'));
goog.global=window;
goog.userAgent = {};
goog.userAgent.jscript = {};

goog.userAgent.jscript.ASSUME_NO_JSCRIPT = false;

// Detect if user agent is using jscript
goog.userAgent.jscript.init_ = function () {
  var hasScriptEngine = 'ScriptEngine' in window;

  goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_ = hasScriptEngine && goog.global['ScriptEngine']() == 'JScript';

  goog.userAgent.jscript.DETECTED_VERSION_ = goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_ ? (goog.global['ScriptEngineMajorVersion']() + '.' + goog.global['ScriptEngineMinorVersion']() + '.' + goog.global['ScriptEngineBuildVersion']()) : '0';
};

if (!goog.userAgent.jscript.ASSUME_NO_JSCRIPT) {
  goog.userAgent.jscript.init_();
}

/**
 * Whether we detect that the user agent is using Microsoft JScript.
 * @type {boolean}
 */
goog.userAgent.jscript.HAS_JSCRIPT = goog.userAgent.jscript.ASSUME_NO_JSCRIPT ? false : goog.userAgent.jscript.DETECTED_HAS_JSCRIPT_;

/**
 * The installed version of JScript.
 * @type {string}
 */
goog.userAgent.jscript.VERSION = goog.userAgent.jscript.ASSUME_NO_JSCRIPT ? '0' : goog.userAgent.jscript.DETECTED_VERSION_;

/**
 * Whether the installed version of JScript is as new or newer than a given
 * version.
 * @param {string} version The version to check.
 * @return {boolean} Whether the installed version of JScript is as new or
 *     newer than the given version.
 */
goog.userAgent.jscript.isVersion = function (version) {
  return goog.string.compareVersions(goog.userAgent.jscript.VERSION, version) >= 0;
};







</code>
</div>

<div  id ="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
</div>





<span id="chapter" class="hidden">11</span>
##Further Reading





  
  







