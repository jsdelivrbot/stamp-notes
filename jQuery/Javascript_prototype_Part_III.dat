 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->
<style>
pre{white-space: pre}

</style>


<h2>Sub-classing Native Objects</h2>
One tricky point i sthe sub-classing of native objects. The one object that is quite simple to sub-class is Object (since it is the root of all prototype chains to begin with). However once you start wanting to sub-class other native objects the situation becomes less clear-cut. For example, with Array everything works as you might expect it to.


<div  class="code-block console-wrap">
<div class="code code-block"><code>
<span class="green">// define the class</span>

function Alphabet(){
    }

Alphabet.prototype  = new Array();

var mine = new Alphabet();
       mine.push('a','b','c','d','e','f');
log(mine.length);

for (var prop in mine){
 log('prop : ',prop, mine[prop]);
}
</code>
</div>
<p id="msg1" class="msg">
</p>
<button class="eval">Run Code!</button>
<ol class="results"></ol>
</div>
</code>

The above will work well  until you attempt to perform this functionality in Internet Explorer. For whatever reason the
native Array object does not allow for it to be inherited from (the length property is immutable - causing
all other pieces of functionality to become stricken).
In general it's a better strategy to implement individual pieces of functionality from native objects, rather
than attempt to sub-class them completely, such as implementing the push method directly. John Resig in jQuery used:

<div  class="code-block console-wrap">
<div class="code code-block"><code>
<span class="green">// define the class</span>
// define the class
function MyArray(){}
MyArray.prototype.length = 0;
(function(){
    var methods = ['push', 'pop', 'shift', 'unshift',
                         'slice', 'splice', 'join'];
    for ( var i = 0; i < methods.length; i++ ) (function(name){
        log(Array.prototype[name]);
        MyArray.prototype[ name ] = function(){
            return Array.prototype[ name ].apply( this, arguments );
        };
    })(methods[i]);
})();
var mine = new MyArray();
mine.push(1, 2, 3);
assert( mine.length == 3,
    "All the items are on our sub-classed array." );
assert( !(mine instanceof Array),
    "We aren't sub-classing Array, though." );
</code>
</div>
<p id="msg1" class="msg">
</p>
<button class="eval">Run Code!</button>
<ol class="results"></ol>
</div>
</code>

<h3>Discovering what Methods are in the Prototype object</h3>
<div  class="code-block console-wrap">
<div class="code code-block"><code>
<span class="green">// define the class</span>

alert(  Array.prototype.toString())

</code>
</div>
<p id="msg1" class="msg">
</p>
<button class="eval">Run Code!</button>
<ol class="results"></ol>
</div>
</code>


##Further Reading




  
  







    