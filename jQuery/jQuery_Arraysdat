 <!--
{{feature: .. Simplicity the art of maximizing the amount of work not done. The Agile Manifesto}}

{{keywords: CodeIgniter,PHP, CodeIgniter, File helper class}}
{{author:Dr Y Lazarides}}
{{date:8 September 2008}}
{{category: PHP, MVC, Parsers}}
{{snippet:using CodeIgniter's file_helper class}}

-->

<style type="text/css">
button#cbutton{color:blue}
div#ex1{};

</style>

##Arrays

Arrays are incredibly useful constructs. An array is simply a 'group' or list of 'data'. It is a very convenient way of defining lot of variables in a list.

Javascript is an object based computer language. With the exception of language constructs like loops and relational operators, almost all of Javascript's features are implemented using objects in one way or another.


<h3>How to define an array</h3>

Arrays in JavaScript are {{wi:mutable_list}}s with a few built-in methods. You can define arrays using the array literal, or using the new operator. Best practice is just to use the shorter form of the array literal.

<div  class="code-block console-wrap clearfix"><div class="code code-block"><code>
// Define a new array like this
  var planets = ['earth ', 'mercury', 'venus', 'jupiter', 'saturn', 'mars'];
// You can also define it like this
  var months = new Array('January', 'February','March');

log('planets  :', planets[0]);
log('months :', months[0]);
</code>
</div>
<div  class="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
<img src="http://localhost/codeigniter/images/jquery.png" style="float:right;width:60px"/>
</div>

<h3>How to define an empty array</h3>
If you attempt to access an array before you define it, you will get an error. You can define an empty array as follows. The array can later have members added dynamically.

{{plain:
 var x = [];
}} 

<h3>How to determine the type of an array</h3>
 <div  class="code-block console-wrap clearfix"><div class="code code-block"><code>
// Define a new array like this
  var planets = ['earth ', 'mercury', 'venus', 'jupiter', 'saturn', 'mars'];
// You can also define it like this
  var months = new Array('January', 'February','March');

 function isArray( obj ) {
		return toString.call(obj) === "[object Array]";
}

log('type of planets  :', typeof planets);
log('instance of month :', typeof months);
log('isArray : ',isArray(months));
</code>
</div>
<div  class="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
<img src="http://localhost/codeigniter/images/jquery.png" style="float:right;width:60px"/>
</div>

<h3>Properties</h3>

The one property that I want to introduce at this stage  is the <tt>.length </tt>property.
The property simply returns the length of the array.

<div  class="code-block console-wrap clearfix"><div class="code code-block"><code>
// Define a new array like this
  var planets = ['earth ', 'mercury', 'venus', 'jupiter', 'saturn', 'mars'];
// You can also define it like this
  var months = new Array('January', 'February','March');

 function isArray( obj ) {
		return toString.call(obj) === "[object Array]";
}

log('type of planets  :', typeof planets);
log('instance of month :', typeof months);
log('isArray : ',isArray(months));
log('months.length :', months.length);
</code>
</div>
<div  class="msg" class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
<img src="http://localhost/codeigniter/images/jquery.png" style="float:right;width:60px"/>
</div>

###How to use the .length property for iteration

An array has a length property that is useful for iteration:

{{plain:
 for (var i = 0; i < a.length; i++) &#123;
   // Do something with a[i]
 &#125;
}} 

When performance is critical, reading the length property only once can help to speed things up. This should be used only when a performance bottleneck was discovered:

<div  class="code-block console-wrap clearfix"><div class="code code-block"><code>
// Define a new array like this
  var planets = ['earth ', 'mercury', 'venus', 'jupiter', 'saturn', 'mars'];
// You can also define it like this
  var months = new Array('January', 'February','March');

 function isArray( obj ) {
		return toString.call(obj) === "[object Array]";
}

for (var i = 0, j = planets.length; i < j; i++) {
   log('i   ', i, planets[i]);
 }
</code>
</div>
<div  class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
<img src="http://localhost/codeigniter/images/jquery.png" style="float:right;width:60px"/>
</div>

<h3>All the properties of an array</h3>
<div  class="code-block console-wrap clearfix"><div class="code code-block"><code>
// Define a new array like this
  var planets = ['earth ', 'mercury', 'venus', 'jupiter', 'saturn', 'mars'];

for (var prop in Array) {
   log('prop   ', prop);
 }
</code>
</div>
<div  class="msg">
</div>
<div class="console"></div>
<button class="eval">Run Code!</button>
<ol class="results"></ol> 
<img src="http://localhost/codeigniter/images/jquery.png" style="float:right;width:60px"/>
</div>


<h3>jQuery Array Utilities</h3> 
jQuery provides a generic each-function to iterate over element of arrays, as well as properties of objects:

{{plain:
 var x = [1, 2, 3];
 jQuery.each(x, function(index, value) &#123;
   console.log("index", index, "value", value);
 &#125;);
}}
 
The drawback is that the callback is called in the context of each value, therefore you lose the context of your own object if applicable. More on this below at Functions.

The __length__ property can also be used to add elements to the end of an array. That is equivalent to using the push-method:

{{plain:
 var x = [];
 x.push(1);
 x[x.length] = 2;
 x // 1, 2
}} 
 
You'll see both variations a lot when looking through JavaScript library code.

Other built-in methods are reverse, join, shift, unshift, pop, slice, splice and sort:

 var x = [0, 3, 1, 2];
 x.reverse() // [2, 1, 3, 0]
 x.join("  ") // "2 - 1 - 3 - 0"
 x.pop() // [2, 1, 3]
 x.unshift(-1) // [-1, 2, 1, 3]
 x.shift() // [2, 1, 3]
 x.sort() // [1, 2, 3]
 x.splice(1, 2) // [2, 3]

<hr/>

{{warning: The .unshift() method does not return a length property in Internet Explorer.}}


###Boolean Default

An array, no matter if it has elements or not, never defaults to false:

 ![] // false


Array<Type> Notation

In the jQuery API you'll often find the notation of Array<Type>:

dragPrevention    Array<String>

This indicates that the method doesn't only expect an array as the argument, but also specifies the expected type. The notation is borrowed from Java 5's generics notation (or C++ templates).

<h2>Copying one Array into Another</h2>
You can simply copy one array into another by assignment?
{{plain:
var  Array1 = ["John","Mary","Yannis"];
var Array2=Array1;
}}


<h2>Sorting with a callback</h2>

Javascript is full of surprises. Did you know you an sort using a callback?
https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Predefined_Core_Objects/Array_Object

<pre style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex1">
var myArray = ["Wind","Fire","Rain"];

function copyArray(arrayIn){
  return arrayOut=arrayIn.splice(0,arrayIn.length-1);
}

var sortFn = function(a,b){
       if (a[a.length - 1] < b[b.length - 1]) return -1;
       if (a[a.length - 1] > b[b.length - 1]) return 1;
       if (a[a.length - 1] == b[b.length - 1]) return 0;
       }
      myArray.sort(); //sort alphabetically

var   newArray1=copyArray(myArray); 
          newArray1.sort(sortFn);

</div>
<button id="cbutton">Click to Sort the Array Alphabetically</button>
<button id="cbutton1">Click to Sort the Array with Callback</button>
</pre>

<h2>indexOf</h2>

indexOf is a JavaScript extension to the ECMA-262 standard; as such it may not be present in other implementations of the standard. I have tested it with Chrome and FireFox and it works. 

<pre style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex2">
var array = [2, 5, 9];
var index = array.indexOf(2);
alert(index);
// index is 0
index = array.indexOf(7);
alert(index);
// index is -1
</div>
<button id="cbutton2">indexOf(0)</button>
<button id="cbutton3">indexOf(7)</button>
</pre>

If you are worried that your script is going to be used in implementations that do not support it you can insert the following code at the beginning of your scripts, allowing use of indexOf in ECMA-262 implementations which do not natively support it. https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf

<h2>toString</h2>
You can also use toString to change the elements of an array to a string. The Array object overrides the toString method of Object. For Array objects, the toString method joins the array and returns one string containing each array element separated by commas. For example, the following code creates an array and uses toString to convert the array to a string.

<pre style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex3" style="margin-left:8px">
var monthNames = new Array("Jan","Feb","Mar","Apr");
myVar = monthNames.toString(); // assigns "Jan,Feb,Mar,Apr" to myVar
alert(myVar);alert(monthNames);alert(''+monthNames);
</div>
<button id="cbutton4">Run</button>
</pre>

JavaScript calls the toString method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.

<h2>filter</h2>
filter(callback[, thisObject]) returns a new array containing the items for which callback returned true.

<pre style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex4">
   var a1 = ['a', 10, 'b', 20, 'c', 30];
   var a2 = a1.filter(function(item) { return typeof item == 'number'; });
   alert(a2); // Alerts 10,20,30
</div>
<button id="cbutton5">Run</button>
</pre>

A more complicated example is shown below adapted from (http://www.webreference.com/programming/javascript/ncz/column4/2.html)

<pre style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex5">
if (!Array.prototype.some)
{
  Array.prototype.some = function(fun /*, thisp*/)
  {
    var i = 0,
        len = this.length >>> 0;

    if (typeof fun != "function")
      throw new TypeError();

    var thisp = arguments[1];
    for (; i < len; i++)
    {
      if (i in this &&
          fun.call(thisp, this[i], i, this))
        return true;
    }

    return false;
  };
}

function isOver90(vValue, iIndex, aArray) {
    return vValue > 90;
}

var aNumbers = [56, 43, 23, 94, 32, 91];
if (aNumbers.some(isOver90)) {
    var aOver90Numbers = aNumbers.filter(isOver90);
    alert("The numbers over 90 are " + aOver90Numbers);
} else {
    alert("There are no numbers over 90");
}
</div>
<button id="cbutton6">Run</button>
</pre>


<h2>every</h2>
The <dfn>every</dfn> method (new in Mozilla) executes the provided callback function once for each element present in the array until it finds one where callback returns a false value. <strong>If such an element is found, the every method immediately returns false. </strong>Otherwise, if callback returned a true value for all elements, every will return true. callback is invoked only for indexes of the array which have assigned values; it is not invoked for indexes which have been deleted or which have never been assigned values.

callback is invoked with three arguments: the value of the element, the index of the element, and the Array object being traversed.

If a thisObject parameter is provided to every, it will be used as the this for each invocation of the callback. If it is not provided, or is null, the global object associated with callback is used instead.

every does not <em>mutate</em> the array on which it is called.

The range of elements processed by every is set before the first invocation of callback. Elements which are appended to the array after the call to every begins will not be visited by callback. If existing elements of the array are changed, their value as passed to callback will be the value at the time every visits them; elements that are deleted are not visited.

every acts like the "for all" quantifier in mathematics. In particular, for an empty array, it returns true. (It is vacuously true {{wi:Vacuous_truth#Vacuous_truths_in_mathematics}} that all elements of the empty set satisfy any given condition.)



<pre style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex6">
if (!Array.prototype.every)
{
  Array.prototype.every = function(fun /*, thisp*/)
  {
    var len = this.length >>> 0;
    if (typeof fun != "function")
      throw new TypeError();

    var thisp = arguments[1];
    for (var i = 0; i < len; i++)
    {
      if (i in this &&
          !fun.call(thisp, this[i], i, this))
        return false;
    }

    return true;
  };
}

function isBigEnough(element, index, array) {
  return (element >= 10);
}
var passed = [12, 5, 8, 130, 44].every(isBigEnough);
 if (passed===false) alert(passed);
passed = [12, 54, 18, 130, 44].every(isBigEnough);
// passed is true
alert(passed);
</div>
<button id="cbutton7">Run</button>
</pre>


<h2>Functions in Arrays</h2>
<pre style="background:url(http://localhost/codeigniter/images/code-bg.gif)">
<div id="ex7">
var aFunctionArray = [
   function(y) {
        return y;
   },
  function(y) {
        return y*y;
  }
];
var z=aFunctionArray[1](3);
alert(z);
</div>
<button id="cbutton8">Run</button>
</pre>

<hr />



<script type="text/javascript">

$(document).ready(function(){
   $('#cbutton').click(function(){
     var aText=$('div.#ex1').text();
       eval(aText);
        alert(myArray[0]+'   '+newArray1[0]);
     });

 $('#cbutton1').click(function(){
     var aText=$('div.#ex1').text();
       eval(aText);
        alert(myArray[0]+ '   '+newArray1[0]);
     });
 $('#cbutton2').click(function(){
     var aText=$('div.#ex2').text();
       eval(aText);
     });
$('#cbutton5').click(function(){
     var aText=$('div.#ex4 ').text();
       eval(aText);
     });


$('#cbutton6').click(function(){
     var aText=$('div.#ex5 ').text();
      eval(aText);
     });

$('#cbutton7').click(function(){
     var aText=$('div.#ex6 ').text();
      eval(aText);
     });

$('button').click(function(){
     var aText=$(this).parent().text();
      eval(aText);
     });
});

</script>





##Further Reading

[Good discussion at Yahoo Developer](http://developer.yahoo.com/ypatterns/parent.php?pattern=transition)





